// ============= ЭФФЕКТЫ ===============

// палитра для типа реалистичного водопада (если ползунок Масштаб выставить на 100)
extern const TProgmemRGBPalette16 WaterfallColors_p FL_PROGMEM = {
  0x000000, 0x060707, 0x101110, 0x151717,
  0x1C1D22, 0x242A28, 0x363B3A, 0x313634,
  0x505552, 0x6B6C70, 0x98A4A1, 0xC1C2C1,
  0xCACECF, 0xCDDEDD, 0xDEDFE0, 0xB2BAB9
};

// стандартные функции библиотеки LEDraw от @Palpalych (для адаптаций его эффектов)
void blurScreen(fract8 blur_amount, CRGB *LEDarray = leds)
{
  blur2d(LEDarray, WIDTH, HEIGHT, blur_amount);
}

// добавлено изменение текущей палитры (используется во многих эффектах ниже для бегунка Масштаб)
const TProgmemRGBPalette16 *palette_arr[] = {&PartyColors_p, &OceanColors_p, &LavaColors_p, &HeatColors_p, &WaterfallColors_p, &CloudColors_p, &ForestColors_p, &RainbowColors_p, &RainbowStripeColors_p};
const TProgmemRGBPalette16 *curPalette = palette_arr[0];
void setCurrentPallete(){
      if (modes[currentMode].Scale > 100) modes[currentMode].Scale = 100; // чтобы не было проблем при прошивке без очистки памяти
      curPalette = palette_arr[(int)((float)modes[currentMode].Scale/100*((sizeof(palette_arr)/sizeof(TProgmemRGBPalette16 *))-1U))];
}

// ------------- конфетти --------------
#define FADE_OUT_SPEED        (70U)                         // скорость затухания
void sparklesRoutine()
{
  for (uint8_t i = 0; i < modes[currentMode].Scale; i++)
  {
    uint8_t x = random(0U, WIDTH);
    uint8_t y = random(0U, HEIGHT);
    if (getPixColorXY(x, y) == 0U)
    {
      leds[XY(x, y)] = CHSV(random(0U, 255U), 255U, 255U);
    }
  }
  fader(FADE_OUT_SPEED);
}

// функция плавного угасания цвета для всех пикселей
void fader(uint8_t step)
{
  for (uint8_t i = 0U; i < WIDTH; i++)
  {
    for (uint8_t j = 0U; j < HEIGHT; j++)
    {
      fadePixel(i, j, step);
    }
  }
}

void fadePixel(uint8_t i, uint8_t j, uint8_t step)          // новый фейдер
{
  int32_t pixelNum = XY(i, j);
  if (getPixColor(pixelNum) == 0U) return;

  if (leds[pixelNum].r >= 30U ||
      leds[pixelNum].g >= 30U ||
      leds[pixelNum].b >= 30U)
  {
    leds[pixelNum].fadeToBlackBy(step);
  }
  else
  {
    leds[pixelNum] = 0U;
  }
}

// =============- новый огонь / водопад -===============
// COOLING: How much does the air cool as it rises?
// Less cooling = taller flames.  More cooling = shorter flames.
// Default 55, suggested range 20-100
#define COOLINGNEW 32
// 8  практически сплошной поток красивой подсвеченной воды ровным потоком сверху донизу. будто бы на столе стоит маленький "родничок"
// 20 ровный водопад с верщиной на свету, где потоки летящей воды наверху разбиваются ветром в белую пену
// 32 уже не ровный водопад, у которого струи воды долетают до земли неравномерно
// чем больше параметр, тем больше тени снизу
// 55 такое, как на видео

// SPARKING: What chance (out of 255) is there that a new spark will be lit?
// Higher chance = more roaring fire.  Lower chance = more flickery fire.
// Default 120, suggested range 50-200.
#define SPARKINGNEW 80 // 30 // 120 // 90 // 60
// 80 почти все белые струи сверху будут долетать до низа - хорошо при выбранном ползунке Масштаб = 100 (белая вода без подкрашивания)
// 50 чуть больше половины будет долетать. для цветных вариантов жидкости так более эффектно

void fire2012WithPalette() {
  //    bool fire_water = modes[currentMode].Scale <= 50;
  //    uint8_t COOLINGNEW = fire_water ? modes[currentMode].Scale * 2  + 20 : (100 - modes[currentMode].Scale ) *  2 + 20 ;
  //    uint8_t COOLINGNEW = modes[currentMode].Scale * 2  + 20 ;
  // Array of temperature readings at each simulation cell
  static byte heat[WIDTH][HEIGHT];

  for (uint8_t x = 0; x < WIDTH; x++) {
    // Step 1.  Cool down every cell a little
    for (int i = 0; i < HEIGHT; i++) {
      heat[x][i] = qsub8(heat[x][i], random8(0, ((COOLINGNEW * 10) / HEIGHT) + 2));
    }

    // Step 2.  Heat from each cell drifts 'up' and diffuses a little
    for (int k = HEIGHT - 1; k >= 2; k--) {
      heat[x][k] = (heat[x][k - 1] + heat[x][k - 2] + heat[x][k - 2]) / 3;
    }

    // Step 3.  Randomly ignite new 'sparks' of heat near the bottom
    if (random8() < SPARKINGNEW) {
      int y = random8(2);
      heat[x][y] = qadd8(heat[x][y], random8(160, 255));
    }

    // Step 4.  Map from heat cells to LED colors
    for (int j = 0; j < HEIGHT; j++) {
      // Scale the heat value from 0-255 down to 0-240
      // for best results with color palettes.
      byte colorindex = scale8(heat[x][j], 240);
      if (modes[currentMode].Scale == 100)
        leds[XY(x, (HEIGHT - 1) - j)] = ColorFromPalette(WaterfallColors_p, colorindex);
      else
        leds[XY(x, (HEIGHT - 1) - j)] = ColorFromPalette(CRGBPalette16( CRGB::Black, CHSV(modes[currentMode].Scale * 2.57, 255U, 255U) , CHSV(modes[currentMode].Scale * 2.57, 128U, 255U) , CRGB::White), colorindex);// 2.57 вместо 2.55, потому что 100 для белого цвета
      //leds[XY(x, (HEIGHT - 1) - j)] = ColorFromPalette(fire_water ? HeatColors_p : OceanColors_p, colorindex);
    }
  }
}

// ------------- огонь -----------------
#define SPARKLES              (1U)                     // вылетающие угольки вкл выкл
#define UNIVERSE_FIRE                                  // универсальный огонь 2-в-1 Цветной+Белый

uint8_t line[WIDTH];
uint8_t pcnt = 0U;
uint8_t deltaHue = 16U;                                // текущее смещение пламени (hueMask)
uint8_t shiftHue[HEIGHT];                              // массив дороожки горизонтального смещения пламени (hueMask)
uint8_t deltaValue = 16U;                              // текущее смещение пламени (hueValue)
uint8_t shiftValue[HEIGHT];                            // массив дороожки горизонтального смещения пламени (hueValue)

//these values are substracetd from the generated values to give a shape to the animation
static const uint8_t valueMask[8][16] PROGMEM =
{
  {0  , 0  , 0  , 32 , 32 , 0  , 0  , 0  , 0  , 0  , 0  , 32 , 32 , 0  , 0  , 0  },
  {0  , 0  , 0  , 64 , 64 , 0  , 0  , 0  , 0  , 0  , 0  , 64 , 64 , 0  , 0  , 0  },
  {0  , 0  , 32 , 96 , 96 , 32 , 0  , 0  , 0  , 0  , 32 , 96 , 96 , 32 , 0  , 0  },
  {0  , 32 , 64 , 128, 128, 64 , 32 , 0  , 0  , 32 , 64 , 128, 128, 64 , 32 , 0  },
  {32 , 64 , 96 , 160, 160, 96 , 64 , 32 , 32 , 64 , 96 , 160, 160, 96 , 64 , 32 },
  {64 , 96 , 128, 192, 192, 128, 96 , 64 , 64 , 96 , 128, 192, 192, 128, 96 , 64 },
  {96 , 128, 160, 255, 255, 160, 128, 96 , 96 , 128, 160, 255, 255, 160, 128, 96 },
  {128, 160, 192, 255, 255, 192, 160, 128, 128, 160, 192, 255, 255, 192, 160, 128}
};

//these are the hues for the fire,
//should be between 0 (red) to about 25 (yellow)
static const uint8_t hueMask[8][16] PROGMEM =
{
  {25, 22, 11, 1 , 1 , 11, 19, 25, 25, 22, 11, 1 , 1 , 11, 19, 25 },
  {25, 19, 8 , 1 , 1 , 8 , 13, 19, 25, 19, 8 , 1 , 1 , 8 , 13, 19 },
  {19, 16, 8 , 1 , 1 , 8 , 13, 16, 19, 16, 8 , 1 , 1 , 8 , 13, 16 },
  {13, 13, 5 , 1 , 1 , 5 , 11, 13, 13, 13, 5 , 1 , 1 , 5 , 11, 13 },
  {11, 11, 5 , 1 , 1 , 5 , 11, 11, 11, 11, 5 , 1 , 1 , 5 , 11, 11 },
  {8 , 5 , 1 , 0 , 0 , 1 , 5 , 8 , 8 , 5 , 1 , 0 , 0 , 1 , 5 , 8  },
  {5 , 1 , 0 , 0 , 0 , 0 , 1 , 5 , 5 , 1 , 0 , 0 , 0 , 0 , 1 , 5  },
  {1 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 0 , 1  }
};

void fireRoutine(bool isColored) // <- ******* для оригинальной прошивки Gunner47 ******* (раскомментить/закоментить)
{
  if (loadingFlag) {
    loadingFlag = false;
    //FastLED.clear();
    generateLine();
    //memset(matrixValue, 0, sizeof(matrixValue)); без очистки
  }
  if (pcnt >= 30) {                                         // внутренний делитель кадров для поднимающегося пламени
    shiftUp();                                              // смещение кадра вверх
    generateLine();                                         // перерисовать новую нижнюю линию случайным образом
    pcnt = 0;
  }
  //  drawFrame(pcnt, (strcmp(isColored, "C") == 0));           // прорисовка экрана
  drawFrame(pcnt, isColored);                              // для прошивки где стоит логический параметр
  pcnt += 25;  // делитель кадров: задает скорость подъема пламени 25/100 = 1/4
}

// Randomly generate the next line (matrix row)
void generateLine() {
  for (uint8_t x = 0U; x < WIDTH; x++) {
    line[x] = random(127, 255);                             // заполнение случайным образом нижней линии (127, 255) - менее контрастное, (64, 255) - оригинал
  }
}

void shiftUp() {                                            //подъем кадра
  for (uint8_t y = HEIGHT - 1U; y > 0U; y--) {
    for (uint8_t x = 0U; x < WIDTH; x++) {
      uint8_t newX = x % 16U;                               // сократил формулу без доп. проверок
      if (y > 7U) continue;
      matrixValue[y][newX] = matrixValue[y - 1U][newX];     //смещение пламени (только для зоны очага)
    }
  }

  for (uint8_t x = 0U; x < WIDTH; x++) {                    // прорисовка новой нижней линии
    uint8_t newX = x % 16U;                                 // сократил формулу без доп. проверок
    matrixValue[0U][newX] = line[newX];
  }
}

// draw a frame, interpolating between 2 "key frames"
// @param pcnt percentage of interpolation

void drawFrame(uint8_t pcnt, bool isColored) {                  // прорисовка нового кадра
  int32_t nextv;
#ifdef UNIVERSE_FIRE                                            // если определен универсальный огонь  
  //  uint8_t baseHue = (float)modes[currentMode].Scale * 2.55;
  uint8_t baseHue = (float)(modes[currentMode].Scale - 1U) * 2.6;
#else
  uint8_t baseHue = isColored ? 255U : 0U;
#endif
  uint8_t baseSat = (modes[currentMode].Scale < 100) ? 255U : 0U;  // вычисление базового оттенка


  //first row interpolates with the "next" line
  deltaHue = random(0U, 2U) ? constrain (shiftHue[0] + random(0U, 2U) - random(0U, 2U), 15U, 17U) : shiftHue[0]; // random(0U, 2U)= скорость смещения языков чем больше 2U - тем медленнее
  // 15U, 17U - амплитуда качания -1...+1 относительно 16U
  // высчитываем плавную дорожку смещения всполохов для нижней строки
  // так как в последствии координаты точки будут исчисляться из остатка, то за базу можем принять кратную ширину матрицы hueMask
  // ширина матрицы hueMask = 16, поэтому нам нужно получить диапазон чисел от 15 до 17
  // далее к предыдущему значению прибавляем случайную 1 и отнимаем случайную 1 - это позволит плавным образом менять значение смещения
  shiftHue[0] = deltaHue;                                   // заносим это значение в стэк

  deltaValue = random(0U, 3U) ? constrain (shiftValue[0] + random(0U, 2U) - random(0U, 2U), 15U, 17U) : shiftValue[0]; // random(0U, 3U)= скорость смещения очага чем больше 3U - тем медленнее
  // 15U, 17U - амплитуда качания -1...+1 относительно 16U
  shiftValue[0] = deltaValue;


  for (uint8_t x = 0U; x < WIDTH; x++) {                                          // прорисовка нижней строки (сначала делаем ее, так как потом будем пользоваться ее значением смещения)
    uint8_t newX = x % 16;                                                        // сократил формулу без доп. проверок
    nextv =                                                               // расчет значения яркости относительно valueMask и нижерасположенной строки.
      (((100.0 - pcnt) * matrixValue[0][newX] + pcnt * line[newX]) / 100.0)
      - pgm_read_byte(&valueMask[0][(x + deltaValue) % 16U]);
    CRGB color = CHSV(                                                            // вычисление цвета и яркости пикселя
                   baseHue + pgm_read_byte(&hueMask[0][(x + deltaHue) % 16U]),    // H - смещение всполохов
                   baseSat,                                                       // S - когда колесо масштаба =100 - белый огонь (экономим на 1 эффекте)
                   (uint8_t)max(0, nextv)                                         // V
                 );
    leds[XY(x, 0)] = color;                                            // прорисовка цвета очага
  }

  //each row interpolates with the one before it
  for (uint8_t y = HEIGHT - 1U; y > 0U; y--) {                                      // прорисовка остальных строк с учетом значения низлежащих
    deltaHue = shiftHue[y];                                                         // извлекаем положение
    shiftHue[y] = shiftHue[y - 1];                                                  // подготавлеваем значение смешения для следующего кадра основываясь на предыдущем
    deltaValue = shiftValue[y];                                                     // извлекаем положение
    shiftValue[y] = shiftValue[y - 1];                                              // подготавлеваем значение смешения для следующего кадра основываясь на предыдущем


    if (y > 8U) {                                                                   // цикл стирания текущей строоки для искр
      for (uint8_t _x = 0U; _x < WIDTH; _x++) {                                     // стираем строчку с искрами (очень не оптимально)
        drawPixelXY(_x, y, 0U);
      }
    }
    for (uint8_t x = 0U; x < WIDTH; x++) {                                          // пересчет координаты x для текущей строки
      uint8_t newX = x % 16U;                                                       // функция поиска позиции значения яркости для матрицы valueMask
      if (y < 8U) {                                                                 // если строка представляет очаг
        nextv =                                                                     // расчет значения яркости относительно valueMask и нижерасположенной строки.
          (((100.0 - pcnt) * matrixValue[y][newX]
            + pcnt * matrixValue[y - 1][newX]) / 100.0)
          - pgm_read_byte(&valueMask[y][(x + deltaValue) % 16U]);

        CRGB color = CHSV(                                                                  // определение цвета пикселя
                       baseHue + pgm_read_byte(&hueMask[y][(x + deltaHue) % 16U ]),         // H - смещение всполохов
                       baseSat,                                                             // S - когда колесо масштаба =100 - белый огонь (экономим на 1 эффекте)
                       (uint8_t)max(0, nextv)                                               // V
                     );
        leds[XY(x, y)] = color;
      }
      else if (y == 8U && SPARKLES) {                                               // если это самая нижняя строка искр - формитуем искорку из пламени
        if (random(0, 20) == 0 && getPixColorXY(x, y - 1U) != 0U) drawPixelXY(x, y, getPixColorXY(x, y - 2U));  // 20 = обратная величина количества искр
        else drawPixelXY(x, y, 0U);
      }
      else if (SPARKLES) {                                                          // если это не самая нижняя строка искр - перемещаем искорку выше
        // старая версия для яркости
        newX = (random(0, 4)) ? x : (x + WIDTH + random(0U, 2U) - random(0U, 2U)) % WIDTH ;   // с вероятностью 1/3 смещаем искорку влево или вправо
        if (getPixColorXY(x, y - 1U) > 0U) drawPixelXY(newX, y, getPixColorXY(x, y - 1U));    // рисуем искорку на новой строчке
      }
    }
  }
}

// ------------- радуга вертикальная ----------------
uint8_t hue;
void rainbowVerticalRoutine()
{
  hue += 4;
  for (uint8_t j = 0; j < HEIGHT; j++)
  {
    CHSV thisColor = CHSV((uint8_t)(hue + j * modes[currentMode].Scale), 255, 255);
    for (uint8_t i = 0U; i < WIDTH; i++)
    {
      drawPixelXY(i, j, thisColor);
    }
  }
}

// ------------- радуга горизонтальная ----------------
void rainbowHorizontalRoutine()
{
  hue += 4;
  for (uint8_t i = 0U; i < WIDTH; i++)
  {
    CHSV thisColor = CHSV((uint8_t)(hue + i * modes[currentMode].Scale), 255, 255);
    for (uint8_t j = 0U; j < HEIGHT; j++)
    {
      drawPixelXY(i, j, thisColor);
    }
  }
}

// ------------- радуга диагональная -------------
void rainbowDiagonalRoutine()
{
  if (loadingFlag)
  {
    loadingFlag = false;
    FastLED.clear();
  }

  hue += 8;
  for (uint8_t i = 0U; i < WIDTH; i++)
  {
    for (uint8_t j = 0U; j < HEIGHT; j++)
    {
      float twirlFactor = 3.0F * (modes[currentMode].Scale / 100.0F);      // на сколько оборотов будет закручена матрица, [0..3]
      CRGB thisColor = CHSV((uint8_t)(hue + ((float)WIDTH / HEIGHT * i + j * twirlFactor) * ((float)255 / maxDim)), 255, 255);
      drawPixelXY(i, j, thisColor);
    }
  }
}

// -------------- цвета (смена цвета) + эффект пульс ------------
// Stefan Petrick's PULSE Effect mod by PalPalych for GyverLamp

void drawCircle(int16_t x0, int16_t y0, uint16_t radius, const CRGB & color) {
  int a = radius, b = 0;
  int radiusError = 1 - a;

  if (radius == 0) {
    drawPixelXY(x0, y0, color);
    return;
  }

  while (a >= b)  {
    drawPixelXY(a + x0, b + y0, color);
    drawPixelXY(b + x0, a + y0, color);
    drawPixelXY(-a + x0, b + y0, color);
    drawPixelXY(-b + x0, a + y0, color);
    drawPixelXY(-a + x0, -b + y0, color);
    drawPixelXY(-b + x0, -a + y0, color);
    drawPixelXY(a + x0, -b + y0, color);
    drawPixelXY(b + x0, -a + y0, color);
    b++;
    if (radiusError < 0)
      radiusError += 2 * b + 1;
    else
    {
      a--;
      radiusError += 2 * (b - a + 1);
    }
  }
}

CRGBPalette16 palette;
CRGB _pulse_color;
uint8_t step;
uint8_t currentRadius = 4;
uint8_t centerX = random8(WIDTH - 5U) + 3U;
uint8_t centerY = random8(HEIGHT - 5U) + 3U;
uint16_t _rc;
uint8_t _pulse_hue;
uint8_t _pulse_hueall;
uint8_t _pulse_delta;
uint8_t pulse_hue;

void pulseRoutine(uint8_t PMode) {
    palette = RainbowColors_p;
    const uint8_t limitSteps = 6U;
    static const float fadeRate = 0.8;

    dimAll(248U);
    uint8_t _sat;
    if (step <= currentRadius) {
      for (uint8_t i = 0; i < step; i++ ) {
        uint8_t _dark = qmul8( 2U, cos8 (128U / (step + 1U) * (i + 1U))) ;
        switch (PMode) {
          case 1U:                    // 1 - случайные диски
            _pulse_hue = pulse_hue;
            _pulse_color = CHSV(_pulse_hue, 255U, _dark);
            break;
          case 2U:                    // 2...17 - перелив цвета дисков
            _pulse_delta = modes[currentMode].Scale;
            _pulse_color = CHSV(_pulse_hueall, 255U, _dark);
            break;
          case 3U:                    // 18...33 - выбор цвета дисков
            _pulse_hue = modes[currentMode].Scale * 2.55;
            _pulse_color = CHSV(_pulse_hue, 255U, _dark);
            break;
          case 4U:                    // 34...50 - дискоцветы
            _pulse_hue += modes[currentMode].Scale;
            _pulse_color = CHSV(_pulse_hue, 255U, _dark);
            break;
          case 5U:                    // 51...67 - пузыри цветы
            _sat =  qsub8( 255U, cos8 (128U / (step + 1U) * (i + 1U))) ;
            _pulse_hue += modes[currentMode].Scale;
            _pulse_color = CHSV(_pulse_hue, _sat, _dark);
            break;
          case 6U:                    // 68...83 - выбор цвета пузырей
            _sat =  qsub8( 255U, cos8 (128U / (step + 1U) * (i + 1U))) ;
            _pulse_hue = modes[currentMode].Scale * 2.55;
            _pulse_color = CHSV(_pulse_hue, _sat, _dark);
            break;
          case 7U:                    // 84...99 - перелив цвета пузырей
            _sat =  qsub8( 255U, cos8 (128U / (step + 1U) * (i + 1U))) ;
            _pulse_delta = modes[currentMode].Scale;
            _pulse_color = CHSV(_pulse_hueall, _sat, _dark);
            break;
          case 8U:                    // 100 - случайные пузыри
            _sat =  qsub8( 255U, cos8 (128U / (step + 1U) * (i + 1U))) ;
            _pulse_hue = pulse_hue;
            _pulse_color = CHSV(_pulse_hue, _sat, _dark);
            break;
        }
        drawCircle(centerX, centerY, i, _pulse_color  );
      }
    } else {
      centerX = random8(WIDTH - 5U) + 3U;
      centerY = random8(HEIGHT - 5U) + 3U;
      _pulse_hueall += _pulse_delta;
      pulse_hue = random8(0U, 255U);
      currentRadius = random8(3U, 9U);
      step = 0;
    }
    step++;
}

// ------------- цвет + вода в бассейне ------------------
// (с) Сотнег. 03.2020
// эффект иммеет шов на стыке краёв матрицы (сзади лампы, как и у других эффектов), зато адаптирован для нестандартных размеров матриц.
// можно было бы сделать абсолютно бесшовный вариант для конкретной матрицы (16х16), но уже была бы заметна зацикленность анимации.

// далее идёт массив из 25 кадров анимации с маской бликов на воде (размер картинки больше размера матрицы, чтобы повторяемость картинки была незаметной)
// бесшовную анимированную текстуру бликов делал в программе Substance Designer (30 дней бесплатно работает) при помощи плагина Bruno Caustics Generator
// но сразу под такой мелкий размер текстура выходит нечёткой, поэтому пришлось делать крупную и потом в фотошопе доводить её до ума
// конвертировал в массив через сервис https://littlevgl.com/image-to-c-array,
// чтобы из ч/б картинки получить массив для коррекции параметра насыщенности цвета, использовал настройки True color -> C array
// последовательность замен полученных блоков массива в ворде: "^p  0x"->"^p  {0x"  ...  ", ^p"->"},^p" ... "},^p#endif"->"}^p },^p {"
static const uint8_t aquariumGIF[25][32][32] PROGMEM =
{
  {
    {0x00, 0x00, 0x00, 0x00, 0x34, 0x8f, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x89, 0xe1, 0x77, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x37, 0x9b, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x7f, 0xdd, 0x77, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x37, 0x94, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0x78, 0x7a, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x4a, 0x71, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x17, 0x38, 0x87, 0x62, 0x00, 0x21, 0x67, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x77, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x20, 0x1b, 0x19, 0x46, 0x2e, 0x00, 0x00, 0x3e, 0x73, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x02, 0x55, 0xc7, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x1f, 0x07, 0x00, 0x00, 0x02, 0x14, 0x00, 0x00, 0x1a, 0xa6, 0x8f, 0x4c, 0x22, 0x04, 0x00, 0x00, 0x00},
    {0x0d, 0x20, 0x62, 0xb3, 0xc8, 0x97, 0x47, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x47, 0x74, 0x6a, 0x70, 0x77, 0x6c, 0x4d, 0x29, 0x11},
    {0x7b, 0x95, 0x9b, 0x60, 0x31, 0x42, 0x61, 0x67, 0x5d, 0x28, 0x00, 0x00, 0x02, 0x23, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x59, 0x4a, 0x3e, 0x0e, 0x01, 0x0a, 0x27, 0x4d, 0x6a, 0x79, 0x7c},
    {0xc5, 0xb1, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x69, 0x82, 0x44, 0x0f, 0x2e, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0xb6, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x25, 0x6c},
    {0x82, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x82, 0x83, 0x79, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xc2, 0x83, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e},
    {0x5e, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xab, 0xec, 0x8f, 0x31, 0x21, 0x28, 0x39, 0x59, 0xa2, 0xc4, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x5d, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0xed, 0xb9, 0x7d, 0x6e, 0x6d, 0x65, 0x55, 0x43, 0x66, 0x5e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x5c, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x99, 0x3d, 0x1d, 0x18, 0x10, 0x02, 0x00, 0x00, 0x13, 0x5a, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x56, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x83, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x50, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x4d, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x98, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x41, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0xb4, 0x97, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x54, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x31, 0x61, 0x07, 0x00, 0x00, 0x00, 0x00, 0x12, 0x5b, 0x90, 0x77, 0x60, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x38, 0x78, 0x2d, 0x00, 0x00, 0x0b, 0x43, 0x7e, 0x79, 0x35, 0x06, 0x0d, 0x35, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x54, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x70, 0xc3, 0x96, 0x48, 0x4d, 0x79, 0x81, 0x4c, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x2f, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x7b, 0x54, 0x2f, 0x27, 0x22, 0x1f, 0x30},
    {0xbf, 0xc9, 0xa6, 0xad, 0xae, 0x72, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x33, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xa3, 0xac, 0x81, 0x7a, 0x78, 0x78, 0x8e},
    {0x92, 0x5a, 0x22, 0x5b, 0x83, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x35, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x74, 0x71, 0x3a, 0x27, 0x27, 0x2d, 0x37, 0x61},
    {0x46, 0x18, 0x00, 0x00, 0x4d, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x34, 0x07, 0x00, 0x00, 0x00, 0x00, 0x26, 0x62, 0x51, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10},
    {0x2f, 0x09, 0x00, 0x00, 0x32, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x33, 0x03, 0x00, 0x04, 0x30, 0x50, 0x3a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
    {0x2f, 0x0d, 0x00, 0x00, 0x1e, 0x48, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x3b, 0x22, 0x3d, 0x39, 0x1e, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03},
    {0x46, 0x1f, 0x00, 0x00, 0x0f, 0x4f, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x65, 0x6c, 0x2f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01},
    {0x74, 0x5f, 0x10, 0x00, 0x16, 0x69, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19},
    {0x4b, 0x42, 0x3a, 0x39, 0x5b, 0x91, 0x6f, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x5b, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x4e},
    {0x00, 0x00, 0x09, 0x2e, 0x79, 0x81, 0x75, 0x72, 0x53, 0x43, 0x3d, 0x37, 0x2f, 0x29, 0x24, 0x1e, 0x20, 0x4e, 0x7b, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x2f, 0x3f, 0x1f},
    {0x00, 0x00, 0x00, 0x00, 0x37, 0x65, 0x60, 0x81, 0x72, 0x67, 0x69, 0x6b, 0x6d, 0x6f, 0x6f, 0x6c, 0x71, 0x98, 0xb2, 0x55, 0x17, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x3e, 0x30, 0x06, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x11, 0x6c, 0x75, 0x32, 0x0a, 0x08, 0x0a, 0x0d, 0x12, 0x18, 0x1f, 0x24, 0x2d, 0x4a, 0x8e, 0x93, 0x4a, 0x16, 0x00, 0x00, 0x00, 0x16, 0x36, 0x39, 0x16, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x0e, 0x7d, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x88, 0x9c, 0x45, 0x11, 0x18, 0x32, 0x3a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x1f, 0x84, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xb1, 0xa5, 0x60, 0x46, 0x26, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x00, 0x00, 0x38, 0x59, 0x0a, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x93, 0x8d, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x46, 0x73, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xa5, 0xa1, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x5f, 0x75, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x22, 0x30, 0x58, 0xc6, 0xd3, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x70, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x32, 0x28, 0x18, 0x19, 0x6d, 0xd7, 0x8b, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x1b, 0x7f, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x34, 0x28, 0x08, 0x00, 0x00, 0x00, 0x09, 0x8d, 0xc3, 0x7f, 0x2a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x6d, 0xc6, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x50, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0xca, 0xa2, 0x7a, 0x6e, 0x54, 0x2c, 0x08, 0x00, 0x00, 0x00},
    {0x0b, 0x24, 0x70, 0xba, 0xc5, 0x95, 0x44, 0x07, 0x00, 0x00, 0x00, 0x00, 0x53, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xa6, 0x36, 0x2c, 0x4e, 0x70, 0x7f, 0x76, 0x57, 0x2f, 0x13},
    {0x8e, 0xa8, 0x9b, 0x51, 0x28, 0x44, 0x68, 0x67, 0x43, 0x12, 0x00, 0x26, 0x71, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x91, 0x5c, 0x00, 0x00, 0x00, 0x05, 0x24, 0x4c, 0x6c, 0x80, 0x88},
    {0xd6, 0xac, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x58, 0x64, 0x66, 0x9e, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x9c, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x74},
    {0x8b, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x6c, 0xeb, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0xb7, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15},
    {0x6b, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x92, 0xef, 0x77, 0x1e, 0x15, 0x1d, 0x30, 0x53, 0xab, 0xd5, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03},
    {0x6b, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0xea, 0xd1, 0x7f, 0x73, 0x76, 0x72, 0x68, 0x5f, 0x7f, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04},
    {0x6a, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0xaf, 0x5d, 0x2d, 0x26, 0x1e, 0x0c, 0x00, 0x00, 0x23, 0x62, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02},
    {0x65, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x76, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x5d, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x94, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x59, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x50, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x8a, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x54, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x43, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0xc3, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x4c, 0x90, 0x34, 0x00, 0x00, 0x00, 0x00, 0x20, 0x6a, 0x9b, 0x8b, 0x5a, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x57, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x8f, 0xe2, 0xac, 0x63, 0x43, 0x3e, 0x65, 0x8b, 0x73, 0x31, 0x11, 0x30, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x5b, 0x12, 0x00, 0x00, 0x00, 0x00, 0x20},
    {0xb5, 0x93, 0x7f, 0x84, 0xa4, 0xc5, 0xa5, 0x52, 0x06, 0x00, 0x00, 0x00, 0x21, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x69, 0x80, 0x4c, 0x3a, 0x41, 0x5a, 0x99},
    {0x3d, 0x03, 0x00, 0x07, 0x39, 0x9d, 0x6e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x75, 0xaa, 0x82, 0x73, 0x88, 0xba, 0xab},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x58, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x55, 0x6e, 0x34, 0x15, 0x14, 0x34, 0x7a, 0x4a},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x55, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x2f, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x4f, 0x5d, 0x12, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x21},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x52, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x32, 0x08, 0x00, 0x00, 0x00, 0x03, 0x4e, 0x5a, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x20},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x30, 0x02, 0x00, 0x06, 0x4a, 0x5c, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x49},
    {0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x32, 0x1c, 0x4b, 0x5f, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x71, 0x7c},
    {0x4a, 0x3a, 0x1e, 0x04, 0x00, 0x01, 0x6b, 0x94, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x5d, 0x6d, 0x5d, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x46, 0x36, 0x34},
    {0x02, 0x21, 0x39, 0x41, 0x45, 0x6a, 0xa9, 0xac, 0x84, 0x63, 0x4d, 0x3f, 0x36, 0x30, 0x2c, 0x29, 0x2d, 0x41, 0x81, 0x81, 0x3a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x18, 0x35, 0x30, 0x0e, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x1c, 0x5d, 0xa5, 0x7b, 0x33, 0x4e, 0x7a, 0x72, 0x60, 0x5f, 0x63, 0x65, 0x64, 0x65, 0x73, 0xa6, 0x94, 0x42, 0x07, 0x00, 0x00, 0x13, 0x30, 0x35, 0x1a, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x24, 0x67, 0x23, 0x00, 0x00, 0x1d, 0x13, 0x05, 0x07, 0x0d, 0x12, 0x17, 0x1c, 0x29, 0x5c, 0xa7, 0x7e, 0x28, 0x1c, 0x2f, 0x37, 0x22, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x1e, 0x4b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x69, 0xb7, 0x80, 0x50, 0x28, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x2a, 0x4d, 0x01, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0xb0, 0xa5, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x00, 0x0a, 0x54, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x50, 0x9c, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x0f, 0x5c, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x0c, 0x25, 0x42, 0x85, 0xd7, 0x81, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x13, 0x67, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x2f, 0x41, 0x40, 0x34, 0x2b, 0x40, 0xb6, 0xbe, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x17, 0x7b, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x7a, 0x47, 0x0f, 0x00, 0x00, 0x00, 0x37, 0xcd, 0x8b, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x33, 0x8b, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0xed, 0x7b, 0x2d, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x0b, 0x8a, 0xc9, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x5f, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0xe5, 0x9d, 0x75, 0x6f, 0x59, 0x31, 0x0c, 0x00, 0x00, 0x00},
    {0x11, 0x33, 0x84, 0xbe, 0xbc, 0x8e, 0x41, 0x07, 0x00, 0x00, 0x00, 0x00, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x9d, 0x32, 0x25, 0x47, 0x6c, 0x7e, 0x77, 0x5b, 0x35, 0x19},
    {0x9c, 0xb1, 0x8f, 0x40, 0x21, 0x43, 0x68, 0x68, 0x44, 0x11, 0x00, 0x18, 0x6b, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x8d, 0x5c, 0x00, 0x00, 0x00, 0x02, 0x1e, 0x45, 0x67, 0x7f, 0x8d},
    {0xd8, 0x99, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x5a, 0x65, 0x62, 0x96, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x9c, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x76},
    {0x8a, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x69, 0xe8, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xac, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c},
    {0x70, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a, 0xea, 0x72, 0x14, 0x0a, 0x11, 0x23, 0x47, 0xaa, 0xd6, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b},
    {0x71, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xe3, 0xe0, 0x80, 0x6f, 0x75, 0x75, 0x73, 0x75, 0x8e, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c},
    {0x71, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xb6, 0x7c, 0x3e, 0x34, 0x2b, 0x17, 0x04, 0x01, 0x34, 0x62, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a},
    {0x6d, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x8a, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05},
    {0x65, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x90, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x5b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x58, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x8f, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x52, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x90, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x51, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x6c, 0xaf, 0x48, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x83, 0xa6, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x57, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0xba, 0xe8, 0xb8, 0x85, 0x62, 0x45, 0x2f, 0x44, 0x81, 0xa7, 0x82, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47},
    {0x93, 0x5e, 0x5a, 0x6b, 0x83, 0x9f, 0xbd, 0xb7, 0x7f, 0x37, 0x2f, 0x3b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x57, 0x40, 0x06, 0x03, 0x1b, 0x68, 0xaa},
    {0x07, 0x00, 0x00, 0x00, 0x04, 0x2d, 0x97, 0x9e, 0x2c, 0x00, 0x00, 0x17, 0x2a, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x7e, 0x72, 0x6a, 0x9b, 0xa8, 0x52},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x68, 0x20, 0x00, 0x00, 0x00, 0x16, 0x26, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x88, 0x8e, 0xa5, 0xb2, 0x3e, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x30, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x61, 0x3b, 0x1d, 0x55, 0x5c, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x5a, 0x29, 0x00, 0x00, 0x2e, 0x47, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x2c, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x59, 0x28, 0x00, 0x00, 0x00, 0x44, 0x7a, 0x1c, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x89, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x2d, 0x04, 0x00, 0x00, 0x00, 0x20, 0x59, 0x30, 0x00, 0x00, 0x02, 0x28, 0x51, 0x67, 0x5e, 0x1d},
    {0x38, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x7d, 0xb8, 0x84, 0x43, 0x17, 0x00, 0x00, 0x00, 0x02, 0x32, 0x37, 0x0d, 0x03, 0x24, 0x5a, 0x3b, 0x04, 0x01, 0x1a, 0x2f, 0x2c, 0x13, 0x0b, 0x31, 0x4f},
    {0x36, 0x45, 0x38, 0x23, 0x14, 0x33, 0x79, 0x7b, 0x50, 0x50, 0x64, 0x6f, 0x5e, 0x43, 0x38, 0x3d, 0x4e, 0x72, 0x6a, 0x54, 0x6e, 0x50, 0x1c, 0x22, 0x35, 0x2f, 0x14, 0x00, 0x00, 0x00, 0x00, 0x0c},
    {0x00, 0x0d, 0x32, 0x5c, 0x8a, 0xa1, 0x5c, 0x0c, 0x00, 0x00, 0x07, 0x38, 0x74, 0x6f, 0x58, 0x57, 0x5f, 0x74, 0xa0, 0xbf, 0x8b, 0x4a, 0x42, 0x38, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x19, 0x82, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x1f, 0x0a, 0x0b, 0x12, 0x1d, 0x4a, 0xa9, 0xb1, 0x6c, 0x33, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x51, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x5d, 0xa9, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x03, 0x4d, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x85, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x00, 0x36, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3f, 0x7a, 0x28, 0x00, 0x00, 0x00, 0x0b, 0x70, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x3a, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x9c, 0x94, 0x2a, 0x0f, 0x07, 0x33, 0x8c, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x3d, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x97, 0x69, 0x3a, 0x2c, 0x3f, 0x95, 0xcb, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x40, 0x53, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x65, 0x37, 0x00, 0x00, 0x00, 0x10, 0x62, 0xe5, 0xa0, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x54, 0x78, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0xf4, 0x84, 0x31, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x1f, 0xa9, 0xcf, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x5c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xe1, 0x9d, 0x74, 0x70, 0x5c, 0x36, 0x10, 0x00, 0x00, 0x00},
    {0x18, 0x45, 0x97, 0xbf, 0xb6, 0x8b, 0x42, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x9d, 0x30, 0x21, 0x41, 0x66, 0x7b, 0x78, 0x5e, 0x3b, 0x1f},
    {0xa8, 0xb5, 0x80, 0x2f, 0x1b, 0x42, 0x68, 0x69, 0x44, 0x11, 0x00, 0x11, 0x6a, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x8a, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x19, 0x3f, 0x61, 0x7e, 0x92},
    {0xd7, 0x83, 0x02, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x5b, 0x66, 0x60, 0x8e, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x9b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x78},
    {0x88, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x66, 0xe4, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xa2, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24},
    {0x73, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xe5, 0x6d, 0x0b, 0x01, 0x07, 0x16, 0x3a, 0xa4, 0xd5, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14},
    {0x75, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xd9, 0xea, 0x80, 0x6a, 0x70, 0x74, 0x7a, 0x8a, 0x99, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15},
    {0x76, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xbc, 0x9e, 0x55, 0x42, 0x39, 0x23, 0x0d, 0x09, 0x44, 0x5d, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12},
    {0x73, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x9c, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x52, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d},
    {0x6c, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x85, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x58, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06},
    {0x60, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x63, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x7f, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x55, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x96, 0xd0, 0x65, 0x1e, 0x03, 0x00, 0x00, 0x00, 0x05, 0x6d, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x51, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12},
    {0xd1, 0xd9, 0xb6, 0x9d, 0x88, 0x66, 0x40, 0x2d, 0x65, 0x91, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x18, 0x7d},
    {0x64, 0x2e, 0x33, 0x4b, 0x6e, 0x8c, 0x9e, 0xb9, 0xe2, 0x94, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x55, 0x2e, 0x01, 0x06, 0x3b, 0x94, 0xa7},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x2e, 0x8d, 0xd7, 0x95, 0x3b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x65, 0x47, 0x68, 0xa6, 0x7d, 0x1f},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x78, 0x74, 0x44, 0x32, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x66, 0xba, 0xbc, 0x61, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x5e, 0x15, 0x20, 0x27, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x7a, 0xda, 0x7e, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x5f, 0x0e, 0x00, 0x1a, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x50, 0x8d, 0xac, 0x51, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x7d, 0x33, 0x00, 0x00, 0x29, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x55, 0x7f, 0x76, 0x7d, 0x6b, 0x13, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0xb8, 0x84, 0x3b, 0x17, 0x1f, 0x39, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x69, 0x94, 0x6a, 0x3a, 0x23, 0x46, 0x58, 0x1c, 0x00},
    {0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x8e, 0x75, 0x63, 0x68, 0x66, 0x54, 0x52, 0x54, 0x27, 0x0a, 0x01, 0x02, 0x0a, 0x2d, 0x81, 0xa2, 0x61, 0x1b, 0x00, 0x00, 0x01, 0x2e, 0x57, 0x39},
    {0x4e, 0x2e, 0x0b, 0x00, 0x00, 0x20, 0x68, 0x77, 0x34, 0x05, 0x02, 0x13, 0x3a, 0x6a, 0x87, 0x9c, 0x9c, 0x7c, 0x66, 0x65, 0x76, 0xa6, 0xab, 0x51, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x47},
    {0x1f, 0x43, 0x55, 0x5a, 0x74, 0x92, 0x5d, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x5f, 0xa7, 0xb6, 0x8a, 0x6d, 0x85, 0xcd, 0xcb, 0x55, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x20, 0x79, 0xb9, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x6b, 0x53, 0x0a, 0x00, 0x0d, 0x71, 0x93, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x37, 0x6d, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x4f, 0x17, 0x00, 0x00, 0x00, 0x1f, 0x74, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x2d, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x56, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x69, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x07, 0x51, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x68, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x7b, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x0c, 0x53, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x7c, 0x7b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x29, 0x7e, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x0e, 0x51, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xc2, 0x61, 0x23, 0x16, 0x0a, 0x05, 0x56, 0x90, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x0d, 0x51, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x74, 0x6d, 0x33, 0x29, 0x2d, 0x33, 0x5c, 0xc1, 0xbf, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x15, 0x64, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0xbf, 0xfe, 0x91, 0x38, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x45, 0xb2, 0x96, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x56, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xdb, 0x99, 0x6e, 0x69, 0x5b, 0x38, 0x14, 0x00, 0x00, 0x00},
    {0x1f, 0x57, 0xa3, 0xb8, 0xad, 0x8f, 0x49, 0x09, 0x00, 0x00, 0x00, 0x00, 0x33, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x94, 0x2c, 0x1b, 0x37, 0x5b, 0x72, 0x72, 0x5c, 0x3d, 0x23},
    {0xaa, 0xad, 0x6a, 0x25, 0x1e, 0x40, 0x68, 0x68, 0x40, 0x0f, 0x00, 0x0a, 0x63, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x13, 0x35, 0x56, 0x76, 0x90},
    {0xc7, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x58, 0x61, 0x58, 0x7f, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x92, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x75},
    {0x7e, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x61, 0xd6, 0xb2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x90, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a},
    {0x6d, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xe7, 0x80, 0x11, 0x00, 0x00, 0x0b, 0x2b, 0x93, 0xc6, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d},
    {0x70, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0xdc, 0xe1, 0x91, 0x7c, 0x73, 0x71, 0x79, 0x96, 0x98, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e},
    {0x72, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0xa0, 0x58, 0x50, 0x70, 0x68, 0x3a, 0x1a, 0x13, 0x50, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b},
    {0x70, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x83, 0x41, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0a, 0x52, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15},
    {0x6a, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x4d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c},
    {0x63, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x80, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04},
    {0x72, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x50, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05},
    {0xba, 0xdc, 0x7e, 0x3f, 0x1c, 0x03, 0x00, 0x00, 0x3c, 0x84, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31},
    {0xc1, 0xae, 0xa0, 0x9d, 0x99, 0x84, 0x65, 0x62, 0x9d, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x4a, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x42, 0xa3},
    {0x2f, 0x0d, 0x12, 0x27, 0x4b, 0x70, 0x93, 0xd7, 0xe2, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x53, 0x25, 0x05, 0x1b, 0x6a, 0xa6, 0x7e},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x68, 0xd2, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x63, 0x55, 0x8c, 0x9e, 0x48, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0xae, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x78, 0xc5, 0x9d, 0x27, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xa2, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x92, 0xc5, 0x36, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xc6, 0x61, 0x14, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4e, 0xcb, 0x9a, 0x09, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0xe1, 0xd8, 0x7d, 0x31, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x4f, 0x9e, 0xa7, 0x84, 0x2d, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x8c, 0x95, 0x9b, 0xb0, 0x8b, 0x40, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1c, 0x67, 0x9c, 0x70, 0x33, 0x44, 0x5f, 0x23, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x7e, 0x56, 0x1c, 0x18, 0x48, 0x99, 0xad, 0x7c, 0x57, 0x48, 0x3f, 0x38, 0x39, 0x55, 0x8c, 0xa1, 0x58, 0x0f, 0x00, 0x01, 0x2a, 0x59, 0x3a, 0x03},
    {0x25, 0x00, 0x00, 0x00, 0x00, 0x12, 0x5e, 0x7b, 0x36, 0x00, 0x00, 0x00, 0x00, 0x28, 0x98, 0xdd, 0xb7, 0x91, 0x8c, 0x99, 0xa2, 0xa0, 0xa8, 0x5a, 0x05, 0x00, 0x00, 0x00, 0x00, 0x16, 0x4e, 0x52},
    {0x4e, 0x4b, 0x36, 0x27, 0x4d, 0x84, 0x64, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x9f, 0x5b, 0x23, 0x23, 0x38, 0x6e, 0x89, 0x6e, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b},
    {0x02, 0x2c, 0x66, 0xa5, 0xae, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x59, 0x00, 0x00, 0x00, 0x00, 0x03, 0x67, 0x6c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x17, 0x89, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x7a, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x01, 0x56, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x7d, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x30, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x61, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x20, 0x2b, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x36, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x81, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x24, 0x32, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x38, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xaa, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x2e, 0x35, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x36, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xad, 0xac, 0x3e, 0x27, 0x20, 0x16, 0x16, 0x43, 0x46, 0x46, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x41, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x7b, 0x2a, 0x19, 0x20, 0x2b, 0x3a, 0x75, 0xa0, 0x76, 0x84, 0x71, 0x25, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x10, 0x78, 0xa1, 0x45, 0x14, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xa5, 0xce, 0xa2, 0x83, 0x72, 0x5e, 0x40, 0x26, 0x12, 0x02, 0x00},
    {0x47, 0x78, 0xb7, 0xb4, 0x94, 0x89, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x29, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xb5, 0x43, 0x1f, 0x36, 0x5b, 0x7c, 0x7a, 0x63, 0x5b, 0x54},
    {0xbe, 0xbc, 0x62, 0x26, 0x2e, 0x4c, 0x6d, 0x6e, 0x40, 0x0e, 0x00, 0x03, 0x5a, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x5f, 0x00, 0x00, 0x00, 0x01, 0x20, 0x24, 0x1e, 0x33, 0x72},
    {0x98, 0x72, 0x00, 0x00, 0x00, 0x00, 0x02, 0x2d, 0x56, 0x5e, 0x53, 0x72, 0x7d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x8a, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d},
    {0x5a, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x61, 0xd0, 0xc2, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x67, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x86, 0xfd, 0xad, 0x42, 0x22, 0x14, 0x0d, 0x24, 0x88, 0xb8, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08},
    {0x81, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xcd, 0xa5, 0x83, 0x7e, 0x83, 0x8f, 0x94, 0xaa, 0x98, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31},
    {0x7d, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x89, 0x5e, 0x0e, 0x0e, 0x1d, 0x32, 0x54, 0x5a, 0x3b, 0x5f, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37},
    {0x70, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x75, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0c, 0x21, 0x50, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20},
    {0x67, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x81, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13},
    {0x66, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x4b, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b},
    {0x87, 0x76, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x81, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x48, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14},
    {0xd5, 0xdd, 0x94, 0x63, 0x3e, 0x1a, 0x07, 0x18, 0x7d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x5e},
    {0x9c, 0x7d, 0x82, 0x90, 0x9c, 0x97, 0x8d, 0xac, 0xaf, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x4b, 0x20, 0x00, 0x00, 0x00, 0x1b, 0x75, 0xb2},
    {0x0b, 0x00, 0x00, 0x0a, 0x27, 0x4e, 0x86, 0xee, 0xcf, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x4e, 0x1e, 0x0d, 0x3e, 0x93, 0x99, 0x49},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xcc, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x65, 0x6f, 0xa5, 0x7b, 0x19, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xab, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x96, 0xca, 0x6c, 0x03, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0xb0, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0xad, 0x99, 0x08, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xc4, 0x43, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x6d, 0xc7, 0x58, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xf2, 0xdb, 0x6b, 0x26, 0x10, 0x18, 0x13, 0x00, 0x00, 0x00, 0x00, 0x03, 0x14, 0x31, 0x69, 0xb0, 0xb7, 0x5b, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x8e, 0xa8, 0xad, 0xbc, 0xb7, 0x8e, 0x5b, 0x3b, 0x29, 0x27, 0x34, 0x46, 0x56, 0x63, 0x77, 0x9f, 0x84, 0x55, 0x67, 0x36, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x7f, 0x64, 0x24, 0x1a, 0x43, 0x9c, 0xdc, 0xce, 0xa6, 0x9b, 0x99, 0x84, 0x6e, 0x55, 0x3d, 0x44, 0x60, 0x3d, 0x0f, 0x24, 0x59, 0x3f, 0x03, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x56, 0x81, 0x42, 0x01, 0x00, 0x00, 0x00, 0x24, 0xa0, 0xce, 0x7b, 0x62, 0x72, 0x69, 0x33, 0x07, 0x00, 0x11, 0x3d, 0x1b, 0x00, 0x00, 0x14, 0x50, 0x55, 0x21},
    {0x47, 0x20, 0x03, 0x03, 0x38, 0x7b, 0x6f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x71, 0x59, 0x00, 0x00, 0x00, 0x1e, 0x28, 0x00, 0x00, 0x0a, 0x34, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x34, 0x59},
    {0x39, 0x5e, 0x73, 0x90, 0x99, 0x4d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x64, 0x23, 0x00, 0x00, 0x00, 0x00, 0x14, 0x14, 0x00, 0x12, 0x34, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c},
    {0x00, 0x12, 0x79, 0xb5, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x61, 0x13, 0x00, 0x00, 0x00, 0x00, 0x01, 0x19, 0x04, 0x1a, 0x33, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x37, 0x62, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x5e, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x17, 0x22, 0x32, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x05, 0x4e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c, 0x00, 0x00, 0x00, 0x11, 0x30, 0x04, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x09, 0x4b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x13, 0x2d, 0x01, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x0c, 0x4c, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x6f, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x19, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x0b, 0x49, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x71, 0xb2, 0x3c, 0x03, 0x00, 0x00, 0x00, 0x09, 0x24, 0x00, 0x00, 0x00, 0x45, 0x57, 0x0a, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x1b, 0x57, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0xb6, 0x6e, 0x2f, 0x28, 0x29, 0x37, 0x5b, 0x44, 0x17, 0x20, 0x4d, 0x86, 0x91, 0x5d, 0x27, 0x0d, 0x00, 0x00},
    {0x30, 0x4c, 0x94, 0x65, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x61, 0x43, 0x04, 0x0a, 0x16, 0x26, 0x5f, 0xa0, 0x82, 0x6d, 0x5e, 0x4d, 0x40, 0x4f, 0x7c, 0x87, 0x6d, 0x5b, 0x45},
    {0x93, 0xb8, 0xca, 0xa0, 0x70, 0x5c, 0x4f, 0x25, 0x00, 0x00, 0x00, 0x00, 0x20, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0xc1, 0x67, 0x16, 0x00, 0x00, 0x00, 0x2b, 0x38, 0x30, 0x40, 0x61},
    {0x5e, 0xcc, 0x86, 0x3b, 0x3d, 0x57, 0x76, 0x74, 0x43, 0x0e, 0x00, 0x00, 0x4b, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x85, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x13, 0x7a, 0x34, 0x00, 0x00, 0x00, 0x08, 0x2d, 0x51, 0x57, 0x4b, 0x61, 0x78, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x12, 0x62, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x5e, 0xbf, 0xd1, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x82, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x1f, 0x63, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x97, 0xee, 0xa9, 0x6a, 0x50, 0x41, 0x35, 0x46, 0xab, 0xa2, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x31, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x89, 0x81, 0x4a, 0x4e, 0x5e, 0x67, 0x6a, 0x87, 0xd6, 0xb9, 0x34, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x4f, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x78, 0x12, 0x00, 0x00, 0x00, 0x00, 0x05, 0x13, 0x57, 0xa5, 0x68, 0x0b, 0x00, 0x00, 0x02, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00},
    {0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x79, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x63, 0x75, 0x19, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x02, 0x1c},
    {0x88, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x6d, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x4c},
    {0x72, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x7a, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x48, 0x52, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a},
    {0x99, 0x81, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x24, 0x3f, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a},
    {0xcb, 0xc0, 0x97, 0x79, 0x5c, 0x39, 0x25, 0x55, 0x8b, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x13, 0x10, 0x3f, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x83},
    {0x5f, 0x46, 0x55, 0x6d, 0x85, 0x92, 0xa9, 0xd6, 0x89, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0a, 0x00, 0x17, 0x42, 0x11, 0x00, 0x00, 0x05, 0x42, 0x90, 0x95},
    {0x00, 0x00, 0x00, 0x00, 0x08, 0x28, 0x6e, 0xdd, 0xa4, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x06, 0x00, 0x00, 0x2c, 0x43, 0x18, 0x1e, 0x64, 0x98, 0x67, 0x17},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xbd, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x03, 0x00, 0x00, 0x06, 0x4a, 0x64, 0x84, 0x95, 0x41, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x9b, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xaa, 0xab, 0x31, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xb0, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x0c, 0x00, 0x00, 0x00, 0x13, 0x62, 0xba, 0x60, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0xb3, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x32, 0x22, 0x24, 0x31, 0x40, 0x5c, 0xad, 0xb8, 0x30, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0xec, 0xc4, 0x51, 0x17, 0x04, 0x01, 0x0c, 0x3b, 0x71, 0x70, 0x68, 0x67, 0x61, 0x53, 0x52, 0x84, 0xaa, 0x41, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x86, 0xb1, 0xb8, 0xb9, 0xa6, 0x7e, 0x74, 0x8a, 0x9c, 0x8c, 0x69, 0x4b, 0x2d, 0x16, 0x06, 0x06, 0x2f, 0x8f, 0x7b, 0x05, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x76, 0x6a, 0x2d, 0x25, 0x5b, 0xae, 0xf4, 0xeb, 0xb2, 0x77, 0x3d, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x61, 0x87, 0x4e, 0x04, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x7b, 0x49, 0x06, 0x00, 0x00, 0x01, 0x4b, 0xb8, 0x8e, 0x39, 0x2f, 0x2b, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x45, 0x4e, 0x56, 0x4f, 0x1b, 0x00},
    {0x10, 0x00, 0x00, 0x00, 0x25, 0x6b, 0x71, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x75, 0x17, 0x00, 0x00, 0x0e, 0x1b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3b, 0x27, 0x0c, 0x34, 0x58, 0x3f},
    {0x55, 0x4b, 0x41, 0x65, 0x85, 0x51, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x14, 0x00, 0x00, 0x00, 0x00, 0x09, 0x35, 0x11, 0x00, 0x00, 0x15, 0x43},
    {0x1a, 0x5f, 0xa8, 0x9e, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x09, 0x00, 0x00, 0x00, 0x0c, 0x31, 0x08, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x12, 0x75, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0d, 0x00, 0x00, 0x00, 0x0f, 0x30, 0x06, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x36, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x2f, 0x06, 0x00, 0x00},
    {0x00, 0x30, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x72, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x2d, 0x02, 0x00, 0x00},
    {0x00, 0x33, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x76, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x3e, 0x02, 0x00, 0x00},
    {0x00, 0x40, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x8c, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x02, 0x24, 0x71, 0x87, 0x31, 0x00, 0x00},
    {0x32, 0x61, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xa1, 0xac, 0x2d, 0x0a, 0x00, 0x00, 0x14, 0x2d, 0x04, 0x00, 0x14, 0x3f, 0x5f, 0x73, 0x86, 0x98, 0x94, 0x68, 0x3d},
    {0x94, 0xbc, 0x9c, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x8c, 0x9a, 0x48, 0x2b, 0x30, 0x57, 0x71, 0x45, 0x35, 0x52, 0x68, 0x5e, 0x40, 0x27, 0x21, 0x43, 0x65, 0x64, 0x6f},
    {0x4d, 0xd7, 0xf3, 0x95, 0x55, 0x38, 0x24, 0x10, 0x03, 0x00, 0x00, 0x00, 0x23, 0x5e, 0x10, 0x00, 0x02, 0x11, 0x47, 0x93, 0x94, 0x84, 0x5a, 0x26, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x09},
    {0x00, 0x6c, 0xc0, 0x79, 0x55, 0x5f, 0x6e, 0x74, 0x57, 0x17, 0x00, 0x00, 0x45, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0xb6, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x39, 0x7b, 0x1b, 0x00, 0x04, 0x1c, 0x3a, 0x54, 0x5b, 0x4c, 0x5c, 0x80, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x38, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x62, 0xc1, 0xe4, 0x7c, 0x2e, 0x10, 0x02, 0x00, 0x30, 0x8d, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x45, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xad, 0xba, 0x82, 0x72, 0x68, 0x60, 0x67, 0xbf, 0xc5, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x57, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x82, 0x2b, 0x0c, 0x14, 0x24, 0x33, 0x46, 0x8a, 0xcb, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x68, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x74, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x71, 0xa4, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x1a, 0x72, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x90, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x55, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x78, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xa8, 0x55, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00},
    {0x9e, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0xa9, 0x42, 0x0a, 0x06, 0x0d, 0x2a, 0x27, 0x13, 0x13, 0x43},
    {0xdc, 0xa2, 0x49, 0x17, 0x01, 0x00, 0x00, 0x33, 0x7c, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x93, 0x86, 0x24, 0x08, 0x09, 0x0b, 0x18, 0x26, 0x3c, 0x8a},
    {0xbc, 0xa8, 0x96, 0x89, 0x76, 0x5e, 0x5b, 0x93, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x78, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x62, 0xab},
    {0x2a, 0x1e, 0x2d, 0x48, 0x66, 0x85, 0xc8, 0xdc, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x4f, 0x3f, 0x07, 0x00, 0x00, 0x23, 0x6e, 0x91, 0x65},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x59, 0xcc, 0x87, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x20, 0x36, 0x35, 0x17, 0x3b, 0x83, 0x80, 0x2f, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xb7, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x22, 0x0b, 0x1d, 0x56, 0x76, 0x97, 0x71, 0x13, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x99, 0x8f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x37, 0x20, 0x33, 0x83, 0xcf, 0x84, 0x0f, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xb4, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x82, 0x77, 0x64, 0x6b, 0xaa, 0xc8, 0x49, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x93, 0xa6, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2d, 0x73, 0xa7, 0x96, 0x67, 0x45, 0x37, 0x5c, 0x9f, 0x55, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0xec, 0xb1, 0x3f, 0x13, 0x0b, 0x18, 0x3f, 0x77, 0x9c, 0x95, 0x5f, 0x25, 0x09, 0x00, 0x00, 0x10, 0x76, 0x7a, 0x04, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x83, 0xc0, 0xc6, 0xbe, 0xa4, 0x90, 0x97, 0x9b, 0x89, 0x59, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x92, 0x33, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x70, 0x72, 0x37, 0x37, 0x7d, 0xdf, 0xf4, 0xa9, 0x5f, 0x26, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x82, 0x78, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x78, 0x52, 0x0c, 0x00, 0x00, 0x19, 0x8c, 0xb9, 0x57, 0x2b, 0x1d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0xa6, 0x4d, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x18, 0x61, 0x75, 0x32, 0x00, 0x00, 0x00, 0x00, 0x04, 0x73, 0x67, 0x03, 0x00, 0x0c, 0x15, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x89, 0x99, 0x40, 0x06},
    {0x33, 0x14, 0x16, 0x4d, 0x7b, 0x5a, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x73, 0x34, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x56, 0x62, 0x5a, 0x4f},
    {0x59, 0x7d, 0x97, 0x84, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x71, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x05, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x40, 0x25, 0x07, 0x26},
    {0x09, 0x6e, 0x91, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x6f, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x34, 0x0d, 0x00, 0x00}
  },
  {
    {0x2b, 0x60, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x39, 0x24},
    {0x1b, 0x42, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x31, 0x13},
    {0x29, 0x48, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x4f, 0x20},
    {0x58, 0x65, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x32, 0x55, 0x88, 0x9f, 0x69},
    {0xbc, 0xb4, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x92, 0x27, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x0a, 0x38, 0x62, 0x75, 0x75, 0x71, 0x78, 0x93, 0xa6},
    {0x7c, 0xe9, 0xa7, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x97, 0x2a, 0x13, 0x12, 0x29, 0x24, 0x05, 0x13, 0x46, 0x72, 0x72, 0x54, 0x32, 0x19, 0x14, 0x24, 0x23, 0x30},
    {0x00, 0x71, 0xef, 0xa5, 0x41, 0x18, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x93, 0x70, 0x39, 0x3c, 0x6a, 0x59, 0x35, 0x51, 0x75, 0x6d, 0x3c, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x07, 0xad, 0xce, 0x7a, 0x60, 0x5b, 0x4e, 0x3a, 0x24, 0x0d, 0x12, 0x57, 0x51, 0x00, 0x00, 0x01, 0x33, 0x7a, 0x8e, 0x7e, 0x3f, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x6c, 0x80, 0x24, 0x1d, 0x34, 0x4b, 0x60, 0x6c, 0x5d, 0x67, 0x9e, 0x5a, 0x00, 0x00, 0x00, 0x03, 0x8e, 0x9b, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x5d, 0x58, 0x00, 0x00, 0x00, 0x00, 0x07, 0x31, 0x74, 0xc7, 0xcb, 0x8b, 0x60, 0x40, 0x39, 0x71, 0xb1, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x64, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x9e, 0x58, 0x3b, 0x44, 0x4d, 0x5e, 0xa2, 0xd9, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x09, 0x72, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x71, 0x44, 0x00, 0x00, 0x00, 0x00, 0x03, 0x21, 0x93, 0xa6, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x21, 0x79, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xa4, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x42, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x18, 0x74, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0xb1, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x6b, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xa0, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x4e, 0xa1, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x26, 0x72, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x9f, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0xed, 0xe4, 0x84, 0x44, 0x19, 0x09, 0x1a, 0x72, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xa5, 0x49, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x2c, 0x34, 0x77},
    {0xc3, 0x9b, 0x8e, 0x88, 0x80, 0x7f, 0xa2, 0x9d, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x95, 0x2b, 0x00, 0x00, 0x14, 0x45, 0x93, 0xd1, 0xdd},
    {0x1b, 0x0d, 0x11, 0x21, 0x3c, 0x6c, 0xd0, 0xbd, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x86, 0x86, 0x3b, 0x33, 0x51, 0x91, 0xc2, 0xa0, 0x50},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xba, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5a, 0x9b, 0x70, 0x57, 0x86, 0x9f, 0x5a, 0x0d, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0xac, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x73, 0x9b, 0xa8, 0xad, 0x9c, 0x44, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xa3, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x88, 0xa8, 0x8f, 0xaa, 0xd3, 0x6f, 0x04, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xb0, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x75, 0xa4, 0x92, 0x55, 0x30, 0x43, 0x94, 0x6e, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x9b, 0x94, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x06, 0x36, 0x79, 0xa6, 0x9c, 0x5e, 0x1c, 0x00, 0x00, 0x05, 0x5e, 0x86, 0x15, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xe4, 0x9a, 0x33, 0x1a, 0x29, 0x51, 0x84, 0xa4, 0x99, 0x60, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x8f, 0x4b, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x7d, 0xca, 0xd2, 0xc2, 0xae, 0xa5, 0x9c, 0x83, 0x51, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x70, 0x87, 0x07, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x66, 0x77, 0x44, 0x53, 0xb6, 0xe7, 0x98, 0x48, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x9b, 0x4a, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x71, 0x59, 0x13, 0x00, 0x05, 0x53, 0xad, 0x77, 0x29, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x70, 0x91, 0x0d, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x0d, 0x54, 0x75, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x9a, 0x4d, 0x0b, 0x0a, 0x0d, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x9b, 0x65, 0x00},
    {0x02, 0x00, 0x05, 0x39, 0x71, 0x61, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x7d, 0x05, 0x00, 0x00, 0x04, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xac, 0x4f},
    {0x60, 0x53, 0x70, 0x76, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x8c, 0x99},
    {0x69, 0x9c, 0x74, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x53, 0x58}
  },
  {
    {0x00, 0x39, 0x6e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x7a, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x09, 0x00, 0x00},
    {0x00, 0x36, 0x5d, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x7c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00},
    {0x00, 0x47, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x7c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x23, 0x00, 0x00},
    {0x1d, 0x74, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x2f, 0x70, 0x8c, 0x48, 0x15},
    {0xa1, 0xd8, 0x8c, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x01, 0x2c, 0x5a, 0x74, 0x80, 0x88, 0x92, 0x97, 0x92},
    {0x77, 0xdb, 0xd8, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x8c, 0x22, 0x00, 0x02, 0x0c, 0x07, 0x00, 0x00, 0x05, 0x39, 0x70, 0x7c, 0x64, 0x41, 0x25, 0x18, 0x27, 0x45, 0x54},
    {0x00, 0x34, 0xca, 0xba, 0x38, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xa4, 0x73, 0x24, 0x14, 0x10, 0x05, 0x0a, 0x34, 0x6f, 0x7b, 0x4f, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x53, 0xd9, 0xa5, 0x55, 0x37, 0x25, 0x13, 0x06, 0x02, 0x1a, 0x70, 0x9f, 0x6e, 0x49, 0x2d, 0x1d, 0x30, 0x62, 0x7b, 0x53, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x16, 0x99, 0x8b, 0x46, 0x43, 0x50, 0x57, 0x59, 0x60, 0x8a, 0xc1, 0xa4, 0x6e, 0x6b, 0x7c, 0x80, 0x8b, 0x73, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x0e, 0x75, 0x48, 0x00, 0x00, 0x0a, 0x26, 0x54, 0x9d, 0xbd, 0x86, 0x65, 0x64, 0x70, 0xaf, 0xee, 0x99, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x14, 0x6f, 0x27, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x7f, 0x57, 0x11, 0x04, 0x08, 0x17, 0x45, 0xb1, 0xa3, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x27, 0x73, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x59, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0xa8, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x43, 0x6d, 0x03, 0x00, 0x00, 0x00, 0x1d, 0x68, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0xaa, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x63, 0x58, 0x00, 0x00, 0x00, 0x01, 0x5c, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x8c, 0x90, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x17, 0x83, 0x40, 0x00, 0x00, 0x07, 0x43, 0x73, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0xac, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x06, 0x80, 0xa7, 0x49, 0x1c, 0x0e, 0x1a, 0x55, 0x54, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0xad, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x9f, 0xfa, 0xcb, 0x67, 0x29, 0x04, 0x01, 0x2f, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x90, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x23, 0x41},
    {0xcc, 0xa2, 0x82, 0x6e, 0x3e, 0x06, 0x00, 0x28, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x93, 0x63, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x51, 0xb1, 0xd6},
    {0x2f, 0x0d, 0x0b, 0x21, 0x41, 0x43, 0x25, 0x39, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x93, 0x44, 0x0a, 0x0b, 0x28, 0x7a, 0xc3, 0xc2, 0x7b},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x59, 0x76, 0x5d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x88, 0xb9, 0x85, 0x7f, 0xb2, 0xc9, 0x87, 0x29, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x89, 0x9b, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x4e, 0xab, 0xe4, 0xe0, 0xfa, 0xd8, 0x62, 0x09, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xa9, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x75, 0xa3, 0x95, 0x6b, 0x6d, 0xb0, 0x98, 0x21, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xa0, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x73, 0xa2, 0x96, 0x59, 0x1e, 0x08, 0x0b, 0x49, 0x86, 0x2d, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x98, 0x7a, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0x7d, 0xa5, 0x9b, 0x62, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x13, 0x7a, 0x5d, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xcd, 0x7c, 0x33, 0x3b, 0x60, 0x89, 0xa0, 0x90, 0x59, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x89, 0x18, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x6f, 0xca, 0xd7, 0xc1, 0xa9, 0x93, 0x72, 0x40, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x8a, 0x5c, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x55, 0x72, 0x54, 0x84, 0xcb, 0x89, 0x33, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x95, 0x1c, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x60, 0x59, 0x18, 0x03, 0x30, 0x86, 0x68, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x95, 0x84, 0x04},
    {0x0d, 0x00, 0x00, 0x00, 0x05, 0x41, 0x6a, 0x41, 0x04, 0x00, 0x00, 0x11, 0x83, 0x84, 0x22, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x62, 0xa0, 0x61},
    {0x66, 0x32, 0x11, 0x32, 0x62, 0x5e, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x11, 0x89, 0x63, 0x02, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x38, 0x3b, 0x56},
    {0x3d, 0x89, 0x95, 0x81, 0x43, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x80, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x1d, 0x00, 0x00},
    {0x00, 0x62, 0xac, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x7a, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x0d, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x11, 0x6c, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x0a, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x18, 0x6e, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x07, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x1f, 0x6d, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x0c, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x37, 0x6e, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x63, 0x61, 0x0b, 0x00, 0x00},
    {0x28, 0x28, 0x71, 0x7e, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x87, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x4f, 0x80, 0xa9, 0xb3, 0x88, 0x5e, 0x40},
    {0x90, 0x9d, 0xda, 0xab, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x82, 0x61, 0x0f, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x68, 0x81, 0x72, 0x57, 0x3d, 0x41, 0x68, 0x91, 0x9d},
    {0x2c, 0x55, 0xbb, 0xdd, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x6d, 0x56, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x66, 0x83, 0x60, 0x28, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1c, 0x21},
    {0x00, 0x00, 0x1d, 0xa7, 0xbc, 0x4f, 0x16, 0x05, 0x00, 0x00, 0x05, 0x3e, 0x8e, 0x67, 0x21, 0x07, 0x03, 0x04, 0x18, 0x52, 0x7f, 0x65, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x49, 0xb8, 0x8b, 0x55, 0x4e, 0x53, 0x56, 0x69, 0x9e, 0xc8, 0xae, 0x84, 0x64, 0x4a, 0x51, 0x7c, 0x78, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x2f, 0x8e, 0x64, 0x44, 0x58, 0x70, 0x81, 0xa7, 0xa9, 0x78, 0x70, 0x86, 0xa1, 0xc6, 0xcc, 0x83, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x3f, 0x9b, 0x57, 0x1e, 0x14, 0x17, 0x30, 0x63, 0x4d, 0x10, 0x05, 0x0f, 0x30, 0x88, 0xd5, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x78, 0x9d, 0x27, 0x00, 0x00, 0x00, 0x07, 0x3a, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x72, 0xa3, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x2c, 0xad, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x33, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x94, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x8b, 0x97, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x33, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0xac, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x55, 0xb4, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x31, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0xa4, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x37, 0xb2, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x30, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x98, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0xaf, 0x8d, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x30, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0xa5, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x4c},
    {0xc6, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x30, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x94, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x72, 0xe2},
    {0x85, 0x59, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x30, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x80, 0x7e, 0x1d, 0x03, 0x04, 0x10, 0x3e, 0x93, 0xca, 0xbd},
    {0x1b, 0x30, 0x43, 0x33, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x30, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0xc3, 0xb1, 0x77, 0x70, 0x8f, 0xc1, 0xb5, 0x68, 0x25},
    {0x00, 0x00, 0x09, 0x30, 0x40, 0x1b, 0x00, 0x00, 0x00, 0x06, 0x31, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x91, 0xd5, 0xde, 0xc9, 0xe1, 0xfa, 0xab, 0x3a, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x19, 0x42, 0x2d, 0x00, 0x00, 0x05, 0x35, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6e, 0x9d, 0x96, 0x6a, 0x4e, 0x56, 0x81, 0xb6, 0x69, 0x04, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x3b, 0x39, 0x09, 0x09, 0x3a, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x35, 0x76, 0x9f, 0x95, 0x5c, 0x20, 0x06, 0x00, 0x00, 0x11, 0x66, 0x70, 0x07, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x43, 0x28, 0x46, 0x3d, 0x05, 0x01, 0x1a, 0x4d, 0x83, 0xa0, 0x92, 0x5b, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7e, 0x31, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x61, 0x76, 0x82, 0x65, 0x6e, 0x89, 0x95, 0x7f, 0x4a, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x70, 0x70, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x80, 0xc4, 0xdd, 0xb9, 0x87, 0x5b, 0x2e, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xa0, 0x51, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x46, 0x77, 0x8b, 0xb9, 0x86, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x85, 0x90, 0x40},
    {0x52, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x11, 0x4f, 0x56, 0x24, 0x28, 0x73, 0x61, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x3c, 0x31, 0x63},
    {0x4c, 0x65, 0x2c, 0x01, 0x08, 0x33, 0x5b, 0x43, 0x09, 0x00, 0x04, 0x60, 0x72, 0x23, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x2a, 0x08, 0x00, 0x08},
    {0x00, 0x38, 0x7a, 0x71, 0x6f, 0x63, 0x25, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x90, 0x31, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x1c, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x3f, 0xae, 0x87, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x7f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x13, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x12, 0x7c, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x0d, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x00, 0x00, 0x5b, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x7c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x0b, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x01, 0x66, 0x56, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x74, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x0a, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x08, 0x6e, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x24, 0x78, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x07, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x13, 0x76, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x7e, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x34, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x3a, 0x86, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x10, 0x71, 0x5c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x59, 0xb8, 0xbc, 0x5d, 0x26, 0x07, 0x00},
    {0x60, 0x47, 0x47, 0x7d, 0x8d, 0x37, 0x00, 0x00, 0x00, 0x00, 0x10, 0x62, 0x4b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x5c, 0x85, 0x8d, 0x84, 0x86, 0x92, 0x96, 0x8f, 0x7c},
    {0x87, 0x8f, 0xb5, 0xbc, 0x85, 0x64, 0x28, 0x0f, 0x0a, 0x0b, 0x31, 0x6f, 0x4a, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x5b, 0x89, 0x72, 0x3b, 0x0e, 0x00, 0x00, 0x0a, 0x35, 0x74, 0x8d},
    {0x02, 0x19, 0x5a, 0xab, 0xba, 0xaa, 0x84, 0x6d, 0x69, 0x6c, 0x8b, 0xb8, 0x79, 0x23, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x45, 0x81, 0x76, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x69, 0xd1, 0x90, 0x56, 0x50, 0x56, 0x60, 0x7c, 0xb6, 0xcb, 0x92, 0x54, 0x2e, 0x21, 0x38, 0x6f, 0x80, 0x44, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x6d, 0xa0, 0x2e, 0x02, 0x00, 0x00, 0x04, 0x12, 0x42, 0xa2, 0xc3, 0xa5, 0xa0, 0xa6, 0xa7, 0x7f, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x11, 0x9b, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x4e, 0x64, 0x50, 0x71, 0xcd, 0xd1, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x5a, 0xb0, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x31, 0x00, 0x00, 0x3b, 0xac, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x0d, 0xad, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x1e, 0x00, 0x00, 0x00, 0x51, 0xa6, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x77, 0xb4, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x82, 0x90, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x47, 0xc2, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x16, 0x00, 0x00, 0x00, 0x00, 0x21, 0xa6, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0xbe, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0xaa, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x49},
    {0xa1, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x8f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xbf},
    {0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x93, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x8b, 0xb1},
    {0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x9c, 0x50, 0x0f, 0x02, 0x00, 0x06, 0x1c, 0x7c, 0xbe, 0x60},
    {0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0xae, 0xe3, 0xa2, 0x7c, 0x70, 0x77, 0xa6, 0xe1, 0xad, 0x4b},
    {0x3f, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x87, 0xc1, 0xda, 0xd1, 0xca, 0xd1, 0xf4, 0xf1, 0x97, 0x5c, 0x4e},
    {0x24, 0x3e, 0x31, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x25, 0x00, 0x00, 0x00, 0x03, 0x33, 0x74, 0x9a, 0x92, 0x65, 0x41, 0x40, 0x4d, 0x63, 0x99, 0xac, 0x4f, 0x10, 0x0a},
    {0x00, 0x08, 0x2d, 0x3b, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x43, 0x0e, 0x14, 0x46, 0x80, 0x9e, 0x8d, 0x55, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x01, 0x24, 0x74, 0x5b, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x17, 0x3c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x85, 0x80, 0x8a, 0x96, 0x81, 0x4a, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x50, 0x8a, 0x2e, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x08, 0x38, 0x33, 0x04, 0x00, 0x00, 0x00, 0x18, 0x8b, 0xd0, 0x9f, 0x67, 0x32, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x42, 0x91, 0x83, 0x28},
    {0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x3f, 0x12, 0x08, 0x1d, 0x79, 0xc4, 0x82, 0x2a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x48, 0x42, 0x4e, 0x72},
    {0x68, 0x59, 0x0f, 0x00, 0x00, 0x00, 0x06, 0x52, 0x70, 0x6a, 0x96, 0xc7, 0x7c, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x36, 0x00, 0x00, 0x23},
    {0x09, 0x53, 0x6a, 0x2e, 0x00, 0x00, 0x1c, 0x61, 0x88, 0x87, 0xbe, 0xa3, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, 0x12, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x38, 0x75, 0x5e, 0x4a, 0x62, 0x4f, 0x22, 0x23, 0x6e, 0x79, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x2f, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x2d, 0x91, 0x9f, 0x49, 0x02, 0x00, 0x00, 0x47, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x22, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x65, 0x80, 0x0d, 0x00, 0x00, 0x00, 0x36, 0x80, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x15, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x53, 0x63, 0x00, 0x00, 0x00, 0x00, 0x31, 0x89, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x0d, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x00, 0x00, 0x11, 0x45, 0x2f, 0x39, 0x40, 0x16, 0x00, 0x2f, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x30, 0x3a, 0x0e, 0x3b, 0x50, 0x0b, 0x00, 0x15, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x0d, 0x44, 0x13, 0x00, 0x35, 0x54, 0x09, 0x00, 0x01, 0x2a, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x36, 0x2f, 0x00, 0x00, 0x26, 0x52, 0x0d, 0x00, 0x00, 0x24, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x23, 0x3e, 0x04, 0x00, 0x00, 0x15, 0x52, 0x16, 0x00, 0x00, 0x1b, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x92, 0x98, 0x23, 0x00, 0x00, 0x00, 0x00},
    {0x0d, 0x30, 0x52, 0x15, 0x00, 0x00, 0x00, 0x13, 0x61, 0x3b, 0x00, 0x00, 0x1d, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x49, 0x8c, 0xb8, 0xc5, 0xa2, 0x7b, 0x58, 0x32, 0x15},
    {0xa2, 0x99, 0x46, 0x03, 0x00, 0x00, 0x07, 0x43, 0x9d, 0x9d, 0x3b, 0x16, 0x38, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x47, 0x7e, 0x79, 0x51, 0x27, 0x1e, 0x3d, 0x63, 0x89, 0x9d, 0x9e},
    {0x7c, 0xa2, 0x66, 0x23, 0x18, 0x37, 0x67, 0x86, 0x93, 0x9f, 0x9b, 0x90, 0x93, 0x5e, 0x15, 0x00, 0x00, 0x00, 0x03, 0x33, 0x75, 0x7c, 0x43, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x37, 0x5e},
    {0x00, 0x34, 0x8e, 0x8a, 0x85, 0x83, 0x6a, 0x44, 0x28, 0x2b, 0x50, 0x88, 0xc7, 0xc2, 0x63, 0x21, 0x12, 0x21, 0x5a, 0x7d, 0x53, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x7e, 0xdf, 0x8a, 0x33, 0x09, 0x00, 0x00, 0x00, 0x00, 0x12, 0x4d, 0xaf, 0xd1, 0x9a, 0x71, 0x80, 0x78, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x97, 0xa6, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0xa0, 0xdf, 0xe3, 0xa3, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x39, 0xb6, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x7f, 0xab, 0xa3, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x98, 0x92, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x46, 0x3f, 0x8e, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x63, 0xbb, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x35, 0x0d, 0x40, 0x97, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0xc5, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x2d, 0x00, 0x00, 0x6b, 0x8f, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x59},
    {0x98, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x25, 0x00, 0x00, 0x14, 0x90, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xce},
    {0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x22, 0x00, 0x00, 0x00, 0x3d, 0x98, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x96, 0xb9},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x22, 0x00, 0x00, 0x00, 0x00, 0x63, 0x85, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xb9, 0x57},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x23, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x89, 0x7f, 0x2a, 0x0d, 0x03, 0x01, 0x09, 0x42, 0xac, 0x7c, 0x0e},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x27, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x89, 0xe5, 0xc5, 0x97, 0x7f, 0x71, 0x7f, 0xba, 0xa2, 0x32, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x38, 0x05, 0x00, 0x05, 0x3a, 0x7e, 0xa4, 0xb5, 0xba, 0xbc, 0xc2, 0xc7, 0xea, 0xff, 0x8c, 0x25, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x5a, 0x43, 0x4b, 0x75, 0x8b, 0x79, 0x4e, 0x2d, 0x28, 0x32, 0x43, 0x59, 0x7f, 0xc4, 0xca, 0x64, 0x14},
    {0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0xb1, 0xab, 0x8c, 0x6c, 0x3a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1f, 0x61, 0xcd, 0xd0, 0x7d},
    {0xa8, 0x55, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0xaf, 0xcd, 0x77, 0x2c, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x4e, 0x6c, 0x9f, 0xcc},
    {0xbd, 0xc3, 0x7a, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xa4, 0xc1, 0x56, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x3d, 0x12, 0x1f, 0x69},
    {0x3b, 0x9e, 0xca, 0x9a, 0x3e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x9d, 0xbd, 0x52, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x41, 0x0e, 0x00, 0x00, 0x00},
    {0x00, 0x1a, 0x79, 0xc2, 0xb3, 0x59, 0x14, 0x00, 0x00, 0x03, 0x2b, 0x96, 0xba, 0x53, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x30, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x05, 0x53, 0xb1, 0xc2, 0x7c, 0x41, 0x31, 0x48, 0x99, 0xba, 0x57, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3f, 0x11, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x3b, 0xa9, 0xc1, 0x81, 0x72, 0xa4, 0xc7, 0x69, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x97, 0x6c, 0x51, 0x8c, 0x98, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x6e, 0x4b, 0x26, 0x48, 0x64, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x4f, 0x37, 0x29, 0x28, 0x29, 0x3e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x00, 0x21, 0x3b, 0x02, 0x0a, 0x65, 0x78, 0x0b, 0x00, 0x00, 0x00, 0x17, 0x3c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x01, 0x38, 0x17, 0x00, 0x00, 0x53, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x21, 0x2f, 0x00, 0x00, 0x00, 0x45, 0x61, 0x02, 0x00, 0x00, 0x00, 0x00, 0x29, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x0c, 0x35, 0x08, 0x00, 0x00, 0x00, 0x3a, 0x65, 0x08, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x05, 0x35, 0x14, 0x00, 0x00, 0x00, 0x00, 0x28, 0x68, 0x12, 0x00, 0x00, 0x00, 0x00, 0x16, 0x39, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x3f, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x6f, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x44, 0xac, 0xd4, 0x88, 0x43, 0x1a, 0x01, 0x00, 0x12},
    {0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x99, 0x86, 0x0c, 0x00, 0x00, 0x00, 0x12, 0x3a, 0x06, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x6a, 0x81, 0x6f, 0x68, 0x7b, 0x89, 0x8c, 0x84, 0x7b, 0x72},
    {0x24, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3b, 0x86, 0xcc, 0xdc, 0x9b, 0x50, 0x1a, 0x07, 0x34, 0x4b, 0x10, 0x00, 0x00, 0x20, 0x5f, 0x77, 0x4e, 0x15, 0x00, 0x00, 0x00, 0x0a, 0x2e, 0x60, 0xad, 0x9c},
    {0x5d, 0x11, 0x00, 0x0e, 0x42, 0x7f, 0x97, 0x8c, 0x70, 0x78, 0x9f, 0xb0, 0xa5, 0x92, 0x9c, 0x79, 0x32, 0x1e, 0x44, 0x71, 0x5a, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x72},
    {0x5c, 0x69, 0x61, 0x8c, 0x9f, 0x80, 0x43, 0x15, 0x06, 0x08, 0x17, 0x3d, 0x73, 0xa7, 0xe1, 0xde, 0x8c, 0x79, 0x75, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c},
    {0x20, 0xb8, 0xd8, 0x8c, 0x3d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x60, 0xcc, 0xff, 0xaf, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x39, 0xcb, 0x87, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0xdf, 0xbf, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x95, 0x9a, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x7e, 0xd2, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a},
    {0xbe, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc6, 0x9c, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7e},
    {0x7b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x8c, 0xc7, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xd0},
    {0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x52, 0xa3, 0x8d, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x9f, 0xae},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x5e, 0x87, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0xbe, 0x4f},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x37, 0x47, 0x7c, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0xaa, 0x7d, 0x0a},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x33, 0x22, 0x69, 0x92, 0x4e, 0x1f, 0x0e, 0x06, 0x08, 0x26, 0x8f, 0x97, 0x28, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x54, 0x5a, 0x45, 0x7a, 0xca, 0xc9, 0xa4, 0x8f, 0x7d, 0x7a, 0xa7, 0xb5, 0x54, 0x05, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x73, 0x66, 0x7f, 0x8e, 0x82, 0x89, 0x99, 0xa7, 0xb1, 0xc6, 0xfe, 0xc3, 0x46, 0x0a, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x67, 0x45, 0x55, 0x68, 0x37, 0x18, 0x13, 0x19, 0x26, 0x3b, 0x5d, 0x9d, 0xe3, 0xac, 0x40, 0x06},
    {0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x61, 0x32, 0x3b, 0x57, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x51, 0xa4, 0xd9, 0xc9, 0x72},
    {0xb2, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x62, 0x2f, 0x32, 0x56, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x4d, 0x41, 0x56, 0xb6, 0xed},
    {0xec, 0xe3, 0x6c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x66, 0x3c, 0x37, 0x58, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x3b, 0x35, 0x02, 0x01, 0x1f, 0x81},
    {0x46, 0xca, 0xfc, 0xa2, 0x35, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x6d, 0x5c, 0x4b, 0x5a, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x48, 0x0a, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x1c, 0x9b, 0xff, 0xd0, 0x7a, 0x50, 0x3c, 0x34, 0x33, 0x4b, 0x85, 0x8e, 0x71, 0x5c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x09, 0x84, 0xe2, 0xa5, 0x73, 0x64, 0x63, 0x6a, 0x88, 0xc3, 0xaf, 0x64, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x48, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x17, 0x85, 0x76, 0x25, 0x14, 0x1a, 0x2b, 0x5b, 0xb7, 0x9e, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x57, 0x79, 0x18, 0x00, 0x00, 0x1a, 0x51, 0x5f, 0x69, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x44, 0x69, 0x3e, 0x0e, 0x15, 0x42, 0x24, 0x00, 0x2a, 0x45, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x09, 0x45, 0x2f, 0x37, 0x4e, 0x5c, 0x34, 0x00, 0x00, 0x00, 0x3a, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x28, 0x18, 0x00, 0x00, 0x35, 0x60, 0x6c, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x49, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x10, 0x24, 0x00, 0x00, 0x00, 0x07, 0x7b, 0x7e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x48, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x02, 0x23, 0x09, 0x00, 0x00, 0x00, 0x00, 0x60, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x1e, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x6c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x73, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x78, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x47, 0x02, 0x00, 0x00, 0x00, 0x03, 0x60, 0xa4, 0x4e, 0x0a, 0x00, 0x00, 0x09, 0x2c, 0x1e},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x8b, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x47, 0x07, 0x00, 0x00, 0x17, 0x56, 0x87, 0x9d, 0x96, 0x7c, 0x6a, 0x5c, 0x53, 0x2c, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x5b, 0xd0, 0xde, 0x68, 0x19, 0x00, 0x00, 0x00, 0x00, 0x32, 0x4d, 0x15, 0x0f, 0x3d, 0x61, 0x53, 0x2a, 0x0e, 0x1c, 0x3d, 0x6c, 0xa4, 0x6e, 0x06, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x0d, 0x45, 0x85, 0xa8, 0xb2, 0xc0, 0xc6, 0xaf, 0x84, 0x4c, 0x21, 0x22, 0x63, 0x65, 0x47, 0x58, 0x52, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x64, 0x26, 0x00},
    {0x00, 0x00, 0x0d, 0x4b, 0x8f, 0xa3, 0x82, 0x4c, 0x27, 0x26, 0x49, 0x7f, 0xaa, 0xb6, 0xaa, 0xb1, 0xc8, 0xa5, 0x7a, 0x3e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x52, 0x0f},
    {0x2a, 0x4b, 0x8d, 0xa8, 0x84, 0x3c, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1a, 0x45, 0x75, 0xaf, 0xff, 0xe0, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x59},
    {0xb7, 0xaf, 0x86, 0x3c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x25, 0x91, 0xd4, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x8d},
    {0xd7, 0x53, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0xac, 0x8e, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xb5},
    {0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x74, 0xb3, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0xbf},
    {0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0xac, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x9d, 0x8c},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x7f, 0xa9, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xaa, 0x38},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x51, 0xc0, 0x90, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xa2, 0x6a, 0x03},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x59, 0xbc, 0xc1, 0x79, 0x52, 0x3c, 0x2b, 0x1c, 0x19, 0x33, 0x91, 0x90, 0x21, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x45, 0x66, 0x73, 0x80, 0x63, 0x58, 0x5e, 0x65, 0x64, 0x6a, 0x9f, 0xb5, 0x53, 0x06, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x4f, 0x4f, 0x1f, 0x28, 0x4f, 0x2d, 0x0b, 0x0f, 0x20, 0x2e, 0x42, 0x83, 0x9b, 0x3f, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x56, 0x48, 0x08, 0x00, 0x06, 0x3c, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x7d, 0x5c, 0x07, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x54, 0x40, 0x00, 0x00, 0x00, 0x00, 0x41, 0x45, 0x08, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7d, 0xa4, 0x41, 0x03},
    {0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x50, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x5e, 0x66, 0x34, 0x21, 0x20, 0x20, 0x33, 0x5c, 0x94, 0xde, 0xc6, 0x5d},
    {0x98, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x5e, 0x2e, 0x1b, 0x21, 0x38, 0x5b, 0x76, 0x63, 0x54, 0x74, 0xc6, 0xe3},
    {0xed, 0xd1, 0x63, 0x1e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x57, 0x03, 0x00, 0x00, 0x00, 0x00, 0x26, 0x5a, 0x20, 0x00, 0x00, 0x00, 0x19, 0x5b, 0x4f, 0x0d, 0x01, 0x08, 0x2f, 0x94},
    {0x5a, 0xe2, 0xf5, 0xa2, 0x6e, 0x52, 0x44, 0x3b, 0x34, 0x37, 0x5d, 0x76, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x25, 0x5c, 0x23, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x4b, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x05},
    {0x00, 0x3e, 0xc9, 0xbd, 0x7d, 0x6e, 0x6a, 0x6d, 0x6c, 0x74, 0x9e, 0x7d, 0x0c, 0x00, 0x00, 0x00, 0x2e, 0x5c, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x56, 0x8a, 0x37, 0x10, 0x0c, 0x11, 0x16, 0x23, 0x4a, 0x77, 0x5a, 0x1e, 0x1c, 0x4c, 0x5d, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x49, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x15, 0x79, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x65, 0xa1, 0x97, 0x98, 0x6e, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x43, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x69, 0x70, 0x08, 0x00, 0x00, 0x00, 0x00, 0x32, 0x57, 0x42, 0x55, 0x8d, 0x54, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x07, 0x4f, 0x60, 0x39, 0x03, 0x00, 0x00, 0x27, 0x44, 0x0e, 0x00, 0x00, 0x26, 0x58, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x18, 0x3b, 0x15, 0x2d, 0x35, 0x11, 0x28, 0x4b, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x42, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x08, 0x1a, 0x00, 0x00, 0x00, 0x24, 0x42, 0x1f, 0x42, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x46, 0x00, 0x00, 0x00, 0x38, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x15, 0x07, 0x00, 0x00, 0x00, 0x00, 0x36, 0x77, 0x78, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x56, 0x05, 0x00, 0x00, 0x38, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x88, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x5e, 0x23, 0x00, 0x00, 0x44, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x69, 0x56, 0x0d, 0x16, 0x6a, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x12},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x7b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x81, 0x6b, 0x0f, 0x10, 0x53, 0x7c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x16, 0x16, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x81, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x7b, 0x1e, 0x00, 0x00, 0x00, 0x64, 0x65, 0x05, 0x00, 0x0e, 0x21, 0x17, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x89, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x51, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xa4, 0x83, 0x43, 0x34, 0x14, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0xbb, 0xc0, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5b, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x8a, 0xa1, 0x71, 0x1f, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x51, 0x9d, 0xd9, 0xf0, 0xc9, 0x8b, 0x4f, 0x1e, 0x01, 0x00, 0x2f, 0x72, 0x1c, 0x00, 0x00, 0x00, 0x0c, 0x39, 0x22, 0x1b, 0x47, 0x39, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x14, 0x57, 0x95, 0xa3, 0x89, 0x5f, 0x5c, 0x89, 0xb2, 0xc2, 0xb3, 0x8f, 0x76, 0x9d, 0x96, 0x24, 0x00, 0x00, 0x18, 0x26, 0x0d, 0x00, 0x00, 0x02, 0x39, 0x29, 0x00, 0x00, 0x00},
    {0x00, 0x11, 0x56, 0x9b, 0xaa, 0x7c, 0x35, 0x09, 0x00, 0x00, 0x03, 0x1b, 0x4a, 0x7e, 0xa0, 0xba, 0xf6, 0xdb, 0x5f, 0x2e, 0x2a, 0x20, 0x05, 0x00, 0x00, 0x00, 0x00, 0x06, 0x40, 0x1d, 0x00, 0x00},
    {0x4b, 0x92, 0xaa, 0x7e, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x3f, 0x88, 0xe0, 0xbe, 0x59, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x4e, 0x24, 0x1a},
    {0xa5, 0x81, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x7a, 0xbf, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x83, 0x95},
    {0x46, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x95, 0x79, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0xc6, 0xac},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x6b, 0xa9, 0x4d, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x79, 0xa2, 0x33},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x50, 0xb4, 0x9c, 0x55, 0x37, 0x24, 0x12, 0x06, 0x00, 0x05, 0x4a, 0x9d, 0x51, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x70, 0xa2, 0x6f, 0x55, 0x57, 0x60, 0x5f, 0x55, 0x4e, 0x67, 0xa9, 0x84, 0x1a, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x4f, 0x7e, 0x7c, 0x3b, 0x0f, 0x0c, 0x1f, 0x33, 0x41, 0x4e, 0x80, 0xb7, 0x66, 0x0b, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x58, 0x51, 0x35, 0x51, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x27, 0x83, 0x6f, 0x0d, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x63, 0x40, 0x06, 0x00, 0x38, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x80, 0x22, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x64, 0x34, 0x00, 0x00, 0x00, 0x20, 0x42, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x84, 0x4e, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x63, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x12, 0x44, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x70, 0x80, 0x16},
    {0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x61, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x41, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x61, 0xbf, 0x73},
    {0x8f, 0x3a, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x5e, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x3e, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x4f, 0x83, 0xd9, 0xf0},
    {0xf3, 0xb8, 0x81, 0x61, 0x4d, 0x41, 0x35, 0x2c, 0x27, 0x36, 0x71, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x4b, 0x1a, 0x00, 0x00, 0x00, 0x18, 0x4c, 0x64, 0x5a, 0x50, 0x60, 0xb8},
    {0x94, 0xbb, 0x80, 0x6f, 0x6d, 0x73, 0x77, 0x76, 0x76, 0x93, 0xb0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x77, 0x45, 0x16, 0x16, 0x45, 0x6e, 0x57, 0x26, 0x04, 0x00, 0x00, 0x1e},
    {0x1e, 0x82, 0x55, 0x16, 0x0b, 0x11, 0x1a, 0x20, 0x26, 0x3c, 0x74, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x65, 0x6f, 0x45, 0x44, 0x71, 0x82, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x4e, 0x67, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x68, 0x4c, 0x07, 0x00, 0x00, 0x00, 0x14, 0x5e, 0x5b, 0x16, 0x08, 0x2e, 0x73, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x21, 0x80, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0xa6, 0x8e, 0x5f, 0x51, 0x5c, 0x7b, 0x5d, 0x0a, 0x00, 0x00, 0x21, 0x49, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x0e, 0x73, 0x68, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x5e, 0x6e, 0x64, 0x65, 0x86, 0xbf, 0x88, 0x17, 0x00, 0x00, 0x00, 0x2a, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x17, 0x44, 0x43, 0x3f, 0x07, 0x00, 0x00, 0x00, 0x07, 0x48, 0x33, 0x00, 0x00, 0x00, 0x0c, 0x5f, 0x71, 0x0e, 0x00, 0x00, 0x00, 0x33, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x20, 0x18, 0x00, 0x27, 0x38, 0x09, 0x00, 0x03, 0x40, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x5c, 0x27, 0x00, 0x00, 0x00, 0x37, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
  },
  {
    {0x03, 0x00, 0x00, 0x00, 0x17, 0x40, 0x16, 0x00, 0x17, 0x4c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x76, 0x6a, 0x69, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x4c, 0x36, 0x58, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x92, 0xa7, 0x94, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x89, 0x7c, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x95, 0x49, 0x31, 0x77, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x09, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x59, 0x00, 0x00, 0x13, 0x75, 0x3a, 0x00, 0x00, 0x00, 0x0b, 0x0b, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x7f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x72, 0x14, 0x00, 0x00, 0x00, 0x21, 0x80, 0x33, 0x12, 0x14, 0x0b, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x86, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x5d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x9a, 0x42, 0x0b, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x89, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x95, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x9f, 0x91, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x6c, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x75, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x71, 0xda, 0xfb, 0xa6, 0x52, 0x1d, 0x00, 0x00, 0x00, 0x4d, 0x6a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x72, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x1d, 0x5e, 0x95, 0xa6, 0x97, 0x9a, 0xb7, 0xc2, 0xb4, 0x8f, 0x63, 0x5b, 0x9a, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x81, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x1d, 0x64, 0x9e, 0x9f, 0x6d, 0x31, 0x11, 0x0d, 0x1e, 0x48, 0x7e, 0xa4, 0xb5, 0xce, 0xfd, 0x9c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x6e, 0x70, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x18, 0x5d, 0x9c, 0xa2, 0x6c, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x38, 0x72, 0xc1, 0xd7, 0x69, 0x0b, 0x00, 0x10, 0x2e, 0x46, 0x2b, 0x25, 0x3d, 0x16, 0x00, 0x00, 0x00, 0x00},
    {0x90, 0x9f, 0x6d, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x33, 0x94, 0xc5, 0x8c, 0x64, 0x59, 0x42, 0x15, 0x00, 0x00, 0x18, 0x39, 0x1c, 0x0b, 0x1a, 0x4f},
    {0x74, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x97, 0xdf, 0xaf, 0x6f, 0x41, 0x22, 0x0b, 0x00, 0x08, 0x3d, 0x5f, 0x63, 0x86, 0x98},
    {0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x68, 0x99, 0x6a, 0x56, 0x57, 0x56, 0x4f, 0x46, 0x44, 0x5e, 0xa6, 0xbe, 0x88, 0x3d},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x78, 0x68, 0x1e, 0x0b, 0x15, 0x29, 0x39, 0x44, 0x4f, 0x70, 0xba, 0x9b, 0x2e, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x5d, 0x92, 0x52, 0x07, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x26, 0x7c, 0x7b, 0x19, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x5a, 0x63, 0x67, 0x4f, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x80, 0x2a, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x65, 0x41, 0x11, 0x2d, 0x50, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x83, 0x52, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x68, 0x30, 0x00, 0x00, 0x08, 0x49, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x71, 0x7b, 0x0f},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x68, 0x25, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x90, 0x38},
    {0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x69, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x86, 0x71},
    {0x53, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x6b, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xa8},
    {0xb7, 0x70, 0x53, 0x43, 0x34, 0x27, 0x1c, 0x15, 0x15, 0x2f, 0x78, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x56, 0xcb},
    {0x95, 0x67, 0x63, 0x6b, 0x74, 0x78, 0x77, 0x73, 0x79, 0xad, 0x98, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x47, 0x90, 0xcb},
    {0x72, 0x23, 0x0b, 0x0d, 0x19, 0x26, 0x2f, 0x35, 0x41, 0x73, 0x86, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x49, 0x5d, 0x55, 0x5b, 0x8d},
    {0x6f, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x4d, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x34, 0x00, 0x00, 0x00, 0x03, 0x3c, 0x65, 0x4f, 0x21, 0x02, 0x00, 0x2c},
    {0x54, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x60, 0x4c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x32, 0x00, 0x00, 0x17, 0x58, 0x5e, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x2e, 0x81, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x9b, 0x92, 0x56, 0x36, 0x20, 0x17, 0x3f, 0x78, 0x43, 0x12, 0x2f, 0x68, 0x47, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x1e, 0x62, 0x57, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x86, 0x8b, 0x7f, 0x81, 0x82, 0x92, 0xb8, 0xa3, 0x62, 0x5d, 0x76, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x1e, 0x1c, 0x22, 0x42, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x4e, 0x19, 0x00, 0x03, 0x12, 0x29, 0x5d, 0xb4, 0x8d, 0x4c, 0x6e, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x13, 0x00, 0x00, 0x17, 0x40, 0x13, 0x00, 0x00, 0x00, 0x21, 0x46, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x74, 0x38, 0x4d, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06}
  },
  {
    {0x00, 0x00, 0x00, 0x07, 0x3e, 0x24, 0x00, 0x00, 0x00, 0x3c, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x98, 0xf8, 0xd9, 0xa2, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x09, 0x3f, 0x28, 0x03, 0x31, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x95, 0x6c, 0x34, 0x72, 0x74, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x4c, 0x53, 0x65, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x74, 0x00, 0x00, 0x02, 0x68, 0x6d, 0x0b, 0x03, 0x07, 0x03, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x90, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x79, 0x2d, 0x00, 0x00, 0x00, 0x07, 0x86, 0x7d, 0x2e, 0x06, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xaa, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8a, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x84, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x8a, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x77, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x75, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x90, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x72, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xc1, 0xe8, 0x71, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x68, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x74, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x66, 0xa0, 0xbc, 0xcd, 0xcb, 0xb3, 0x8f, 0x5e, 0x39, 0x4d, 0x9a, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x75, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x29, 0x6e, 0x9a, 0x92, 0x66, 0x37, 0x2b, 0x4a, 0x7a, 0xa3, 0xb4, 0xb5, 0xd8, 0xeb, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x71, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x27, 0x6d, 0x9d, 0x94, 0x5a, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x35, 0x64, 0xa6, 0xed, 0xb9, 0x32, 0x00, 0x00, 0x00, 0x00, 0x16, 0x78, 0x70, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x63, 0x97, 0x93, 0x58, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x66, 0xc7, 0xb7, 0x70, 0x5b, 0x61, 0x76, 0xae, 0xda, 0x97, 0x44, 0x13, 0x04, 0x02, 0x06, 0x23},
    {0x90, 0x5c, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x69, 0xd5, 0xd1, 0xab, 0xa8, 0xa8, 0xab, 0xaa, 0xa8, 0x99, 0x78, 0x53, 0x45, 0x65, 0x8d},
    {0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x4d, 0x97, 0x75, 0x44, 0x32, 0x29, 0x23, 0x27, 0x40, 0x68, 0x90, 0xb3, 0xbe, 0xa4, 0x6d},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x77, 0x81, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x26, 0x7d, 0xc1, 0x6e, 0x13},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x5b, 0x86, 0x70, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x7f, 0x5e, 0x03},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x63, 0x4f, 0x39, 0x59, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x66, 0x75, 0x10},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x6a, 0x35, 0x00, 0x00, 0x3f, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x8b, 0x33},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x6b, 0x25, 0x00, 0x00, 0x00, 0x21, 0x4c, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x88, 0x63},
    {0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x4d, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x67, 0x8c},
    {0x64, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x6f, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x49, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xa1},
    {0xbe, 0x68, 0x38, 0x26, 0x18, 0x0e, 0x06, 0x02, 0x05, 0x2c, 0x7b, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x98},
    {0xaf, 0x7d, 0x68, 0x6d, 0x70, 0x6e, 0x69, 0x65, 0x77, 0xaf, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x7e},
    {0x65, 0x1e, 0x13, 0x21, 0x31, 0x3e, 0x46, 0x4d, 0x67, 0xa6, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x73},
    {0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x6d, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x50, 0x80},
    {0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x49, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x44, 0x56, 0x7e, 0x92},
    {0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x5d, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x4f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x04, 0x39, 0x5c, 0x46, 0x29, 0x3a, 0x7b},
    {0x71, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x8b, 0x8d, 0x4b, 0x26, 0x11, 0x10, 0x50, 0x5b, 0x06, 0x00, 0x00, 0x00, 0x16, 0x52, 0x51, 0x1f, 0x00, 0x00, 0x00, 0x49},
    {0x2f, 0x46, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x85, 0xaa, 0x95, 0x89, 0x84, 0x94, 0xb9, 0x70, 0x0f, 0x00, 0x00, 0x25, 0x5a, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20},
    {0x00, 0x0c, 0x3c, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x53, 0x39, 0x10, 0x11, 0x24, 0x3e, 0x71, 0xc8, 0xaf, 0x41, 0x16, 0x37, 0x5f, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0b},
    {0x00, 0x00, 0x06, 0x3d, 0x27, 0x00, 0x00, 0x00, 0x00, 0x07, 0x45, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xc1, 0xc3, 0x95, 0x83, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00}
  },
  {
    {0x00, 0x00, 0x00, 0x2d, 0x38, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xd2, 0xf3, 0xa4, 0xb2, 0xd1, 0x77, 0x17, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x2f, 0x36, 0x02, 0x00, 0x0d, 0x45, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0xaa, 0x52, 0x1d, 0x34, 0x8b, 0xa6, 0x55, 0x1c, 0x01, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x3b, 0x15, 0x45, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x95, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x6a, 0x6a, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x82, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x33, 0x94, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x86, 0x87, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x81, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5b, 0x90, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x7f, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x8b, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x75, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x88, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0x73, 0x01, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x9c, 0xbc, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x09, 0x7a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2d, 0x79, 0xc1, 0xe5, 0xc2, 0x8b, 0x5a, 0x2e, 0x1a, 0x50, 0x95, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x04, 0x31, 0x6e, 0x90, 0x8a, 0x69, 0x5a, 0x7a, 0x9d, 0xaf, 0xaa, 0xa3, 0xd3, 0xc8, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x78, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x05, 0x32, 0x73, 0x96, 0x83, 0x49, 0x14, 0x00, 0x00, 0x01, 0x12, 0x34, 0x5e, 0x8a, 0xd2, 0xf4, 0x83, 0x12, 0x00, 0x00, 0x00, 0x00, 0x10, 0x70, 0x92, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x2f, 0x6e, 0x94, 0x82, 0x45, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x3d, 0xa1, 0xd9, 0x9b, 0x68, 0x64, 0x71, 0x84, 0xad, 0xea, 0xca, 0x6e, 0x2c, 0x09, 0x02, 0x01, 0x09},
    {0x8c, 0x7f, 0x44, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x3c, 0xb3, 0xe4, 0xb8, 0xb1, 0xb3, 0xb0, 0xaa, 0xa3, 0xa5, 0xa7, 0x93, 0x70, 0x4a, 0x48, 0x6f},
    {0x51, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x8d, 0x86, 0x4f, 0x3b, 0x31, 0x26, 0x1d, 0x1c, 0x29, 0x4b, 0x78, 0xa0, 0xbc, 0xb7, 0x91},
    {0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x67, 0x92, 0x4b, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x3b, 0xa1, 0xb4, 0x47},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x5e, 0x68, 0x6d, 0x49, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x85, 0x3b},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x68, 0x41, 0x12, 0x32, 0x53, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x7b, 0x5a},
    {0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x6b, 0x2b, 0x00, 0x00, 0x06, 0x4b, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x66, 0x7f},
    {0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x6c, 0x20, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x91},
    {0x83, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x4a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x8e},
    {0xae, 0x73, 0x26, 0x0e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x78, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x4d, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x66},
    {0xa0, 0xb1, 0x71, 0x61, 0x5e, 0x58, 0x51, 0x4f, 0x6d, 0xa0, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x4b, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x35},
    {0x82, 0x67, 0x31, 0x34, 0x44, 0x50, 0x57, 0x60, 0x91, 0xae, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x49, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c},
    {0x6e, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x17, 0x6a, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x49, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39},
    {0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x64, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x4b, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51},
    {0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x5e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x49, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x6f},
    {0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x63, 0x9a},
    {0x51, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x7c, 0x81, 0x3e, 0x16, 0x07, 0x17, 0x63, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x1e, 0x2e, 0x60, 0x8a, 0x81},
    {0x40, 0x3d, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x6f, 0xb9, 0xa5, 0x89, 0x82, 0xa6, 0xaf, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x4d, 0x52, 0x56, 0x62, 0x32, 0x1c},
    {0x00, 0x2e, 0x3a, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x52, 0x2b, 0x25, 0x37, 0x54, 0x9b, 0xdb, 0x87, 0x1b, 0x00, 0x00, 0x00, 0x22, 0x54, 0x43, 0x1e, 0x22, 0x13, 0x00, 0x00},
    {0x00, 0x00, 0x2b, 0x3a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x7b, 0xd7, 0xa1, 0x5f, 0x4c, 0x5a, 0x6c, 0x38, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x15, 0x3f, 0x11, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3c, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0xf1, 0xdd, 0x9e, 0x9e, 0xb4, 0xcf, 0xb2, 0x5e, 0x0a, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x17, 0x3e, 0x0f, 0x00, 0x00, 0x00, 0x32, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0xa9, 0x42, 0x21, 0x31, 0x6d, 0xdf, 0xa2, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x1a, 0x3d, 0x10, 0x00, 0x1e, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x85, 0x37, 0x00, 0x00, 0x00, 0x00, 0x55, 0x99, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x42, 0x28, 0x4b, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x85, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x6d, 0x6b, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x79, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6b, 0x89, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x7c, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x81, 0x07, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x8a, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x86, 0x14, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x7f, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x85, 0x18, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x7c, 0x87, 0x18, 0x00, 0x00, 0x00, 0x00, 0x20, 0x7f, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x80, 0x15, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x43, 0xa2, 0xce, 0x94, 0x52, 0x29, 0x0f, 0x11, 0x63, 0x89, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x72, 0x0b, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x07, 0x30, 0x66, 0x87, 0x8a, 0x87, 0x95, 0xa0, 0x9a, 0x83, 0x76, 0xa3, 0x98, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x5f, 0x02, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x09, 0x35, 0x6c, 0x83, 0x6e, 0x3f, 0x18, 0x0e, 0x19, 0x34, 0x5b, 0x7b, 0x96, 0xc2, 0xd0, 0x64, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x5e, 0xa5, 0x59, 0x0d, 0x00, 0x00, 0x00, 0x00},
    {0x0c, 0x35, 0x6c, 0x84, 0x6d, 0x36, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x3c, 0x87, 0xd3, 0xc9, 0x90, 0x70, 0x6f, 0x7a, 0x8c, 0xaa, 0xe2, 0xe3, 0x95, 0x4c, 0x17, 0x04, 0x00, 0x00},
    {0x6d, 0x7f, 0x69, 0x32, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x43, 0x65, 0x9b, 0xcb, 0xbd, 0xb3, 0xb3, 0xad, 0xa2, 0x93, 0x91, 0x9f, 0x9c, 0x84, 0x5d, 0x3d, 0x47},
    {0x77, 0x36, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x2a, 0x20, 0x49, 0x6c, 0x4f, 0x37, 0x2c, 0x21, 0x17, 0x14, 0x19, 0x2e, 0x56, 0x83, 0xa5, 0xb3, 0xa0},
    {0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x2a, 0x0c, 0x0a, 0x3c, 0x40, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x17, 0x53, 0xaf, 0x91},
    {0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x32, 0x1b, 0x09, 0x20, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x5d, 0x76},
    {0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x35, 0x30, 0x18, 0x11, 0x1c, 0x55, 0x4d, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x7b},
    {0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x36, 0x3d, 0x1c, 0x0a, 0x00, 0x00, 0x25, 0x53, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x7b},
    {0x8f, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x32, 0x43, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x03, 0x4b, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x66},
    {0x88, 0x7f, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x09, 0x34, 0x40, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x36},
    {0x5c, 0xb0, 0x83, 0x51, 0x44, 0x3e, 0x39, 0x45, 0x54, 0x42, 0x26, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c},
    {0x4d, 0x91, 0x63, 0x42, 0x49, 0x54, 0x5d, 0x79, 0x7a, 0x4d, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x57, 0x67, 0x11, 0x00, 0x00, 0x03, 0x09, 0x17, 0x4c, 0x79, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x67, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c},
    {0x6f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x61, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26},
    {0x65, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x5f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48},
    {0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x47, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x75},
    {0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x6b, 0x71, 0x2e, 0x08, 0x00, 0x29, 0x64, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x64, 0xa6},
    {0x5b, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0xaf, 0xa9, 0x7f, 0x7c, 0xab, 0x8e, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x63, 0x7c, 0x6b},
    {0x26, 0x43, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x56, 0x46, 0x3a, 0x47, 0x68, 0xbb, 0xc7, 0x56, 0x07, 0x00, 0x00, 0x00, 0x00, 0x12, 0x20, 0x4e, 0x6f, 0x51, 0x1a, 0x07},
    {0x00, 0x16, 0x3e, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x23, 0xa5, 0xc9, 0x7e, 0x4d, 0x37, 0x2d, 0x40, 0x6b, 0x7b, 0x64, 0x27, 0x00, 0x00, 0x00}
  },
  {
    {0x00, 0x04, 0x36, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0xff, 0xc9, 0xa3, 0xa6, 0xb8, 0xb4, 0x94, 0x88, 0x5c, 0x16, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x04, 0x37, 0x22, 0x00, 0x00, 0x00, 0x00, 0x19, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0xa3, 0x3b, 0x2a, 0x3d, 0x70, 0xdc, 0xe5, 0x65, 0x07, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x06, 0x39, 0x20, 0x00, 0x00, 0x03, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x8d, 0x17, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xb2, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x08, 0x3b, 0x23, 0x02, 0x30, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x46, 0x43, 0x56, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x83, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x88, 0x0f, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x75, 0x58, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x8f, 0x26, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x60, 0x4b, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x8c, 0x36, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x8c, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x88, 0x3b, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x58, 0x8c, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x86, 0x35, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x4e, 0x68, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x7a, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x7f, 0x24, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3b, 0x87, 0xa5, 0x77, 0x4a, 0x2b, 0x14, 0x06, 0x0d, 0x41, 0x80, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x78, 0x15, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x0a, 0x32, 0x62, 0x7b, 0x73, 0x64, 0x66, 0x6e, 0x74, 0x70, 0x63, 0x63, 0x82, 0xbf, 0x8e, 0x22, 0x00, 0x00, 0x00, 0x00, 0x10, 0x4e, 0xb3, 0x82, 0x21, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x0d, 0x36, 0x66, 0x77, 0x60, 0x32, 0x0e, 0x02, 0x05, 0x16, 0x3b, 0x6a, 0x95, 0x98, 0x9a, 0xbf, 0xcb, 0xa0, 0x82, 0x7f, 0x87, 0x98, 0xb0, 0xdc, 0xed, 0xb9, 0x72, 0x31, 0x0c, 0x00, 0x00},
    {0x45, 0x67, 0x74, 0x5c, 0x2a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x37, 0x48, 0x34, 0x32, 0x49, 0x80, 0xaf, 0xc3, 0xc2, 0xb9, 0xb0, 0xa0, 0x8b, 0x7d, 0x8e, 0x9d, 0x94, 0x76, 0x4b, 0x33},
    {0x8d, 0x64, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x23, 0x04, 0x00, 0x00, 0x04, 0x34, 0x72, 0x64, 0x3b, 0x2a, 0x1e, 0x13, 0x0f, 0x10, 0x1b, 0x38, 0x66, 0x8e, 0xa6, 0xa6},
    {0x71, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x4c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x25, 0x6e, 0xb3},
    {0x61, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x1f, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x49, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x6f},
    {0x7a, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1e, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x52, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x53},
    {0x89, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1d, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x5a, 0x5a, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3e},
    {0x5e, 0x89, 0x37, 0x01, 0x00, 0x00, 0x12, 0x24, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x35, 0x5a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x1d},
    {0x27, 0x8b, 0x97, 0x50, 0x3b, 0x45, 0x3f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x51, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x12, 0x77, 0x92, 0x56, 0x52, 0x6f, 0x52, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x18, 0x72, 0x52, 0x0b, 0x06, 0x1e, 0x49, 0x3c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x2e, 0x72, 0x25, 0x00, 0x00, 0x00, 0x09, 0x39, 0x3e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x4d, 0x69, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x50, 0x3c, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x69, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x74, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03},
    {0x76, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x69, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x46, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d},
    {0x71, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x5d, 0x05, 0x00, 0x00, 0x00, 0x0f, 0x4c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47},
    {0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x60, 0x6a, 0x22, 0x00, 0x00, 0x41, 0x59, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x85},
    {0x63, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x9c, 0xab, 0x7a, 0x7e, 0xa9, 0x68, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x70, 0xac},
    {0x54, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x49, 0x5b, 0x53, 0x5a, 0x84, 0xd2, 0xa5, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x37, 0x71, 0x70, 0x4f},
    {0x0c, 0x3a, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x34, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x51, 0xc3, 0xad, 0x64, 0x42, 0x32, 0x31, 0x31, 0x1c, 0x2d, 0x5e, 0x6f, 0x3f, 0x0b, 0x00}
  },
  {
    {0x00, 0x00, 0x0f, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x1f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0xee, 0xe7, 0xb7, 0xbe, 0xc6, 0x90, 0x4e, 0x63, 0x9f, 0x5d, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x32, 0x21, 0x00, 0x00, 0x00, 0x06, 0x21, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x81, 0xa7, 0x51, 0x3a, 0x52, 0x88, 0xd6, 0xf0, 0xbd, 0x7b, 0x13, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x2d, 0x56, 0x07, 0x00, 0x04, 0x23, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x8d, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x34, 0xdb, 0xac, 0x2f, 0x05, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x10, 0x49, 0x45, 0x18, 0x2f, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7a, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0xa1, 0x25, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x04, 0x4c, 0x6d, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x83, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x98, 0x3a, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x79, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x8e, 0x54, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5c, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x71, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0x62, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x50, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x77, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x64, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x75, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x81, 0x5f, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x4e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x77, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0xa6, 0x61, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x46, 0x71, 0x33, 0x06, 0x00, 0x00, 0x00, 0x00, 0x03, 0x33, 0x9f, 0x90, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x7f, 0xb5, 0x73, 0x1f, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x07, 0x36, 0x7b, 0xa5, 0x89, 0x67, 0x56, 0x52, 0x53, 0x59, 0x6a, 0x8c, 0xbb, 0xc4, 0x88, 0x4a, 0x2b, 0x1d, 0x1f, 0x46, 0x7e, 0x7e, 0x4c, 0x4b, 0x4d, 0x25, 0x00, 0x00},
    {0x02, 0x02, 0x0e, 0x30, 0x5b, 0x72, 0x6d, 0x61, 0x6c, 0x8d, 0xaf, 0xaf, 0xa8, 0xa9, 0xb2, 0x9f, 0x6b, 0x63, 0x7e, 0x8d, 0x96, 0xa1, 0xbb, 0xb5, 0x72, 0x2a, 0x09, 0x06, 0x25, 0x47, 0x3b, 0x14},
    {0x46, 0x47, 0x62, 0x6d, 0x58, 0x2f, 0x10, 0x0c, 0x25, 0x53, 0x5e, 0x4c, 0x41, 0x3f, 0x47, 0x55, 0x41, 0x1c, 0x17, 0x2d, 0x52, 0x87, 0xb8, 0xa0, 0x67, 0x41, 0x22, 0x0f, 0x0b, 0x20, 0x47, 0x57},
    {0x8b, 0x90, 0x5f, 0x26, 0x02, 0x00, 0x00, 0x00, 0x25, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x31, 0x29, 0x08, 0x0e, 0x31, 0x4c, 0x47, 0x42, 0x48, 0x4d, 0x4e, 0x4b, 0x43, 0x3a, 0x3b, 0x5b},
    {0x9c, 0x6b, 0x11, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x3c, 0x41, 0x3f, 0x34, 0x11, 0x00, 0x00, 0x00, 0x09, 0x1a, 0x2d, 0x3c, 0x47, 0x51, 0x6c},
    {0x95, 0x5c, 0x02, 0x00, 0x00, 0x01, 0x1a, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x72, 0x4f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x21, 0x52},
    {0x77, 0x7e, 0x22, 0x00, 0x05, 0x1d, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x65, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29},
    {0x3a, 0x82, 0x68, 0x2b, 0x2c, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x5f, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x17},
    {0x0a, 0x59, 0xa9, 0x84, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x67, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00},
    {0x00, 0x3c, 0xa3, 0x98, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x6b, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x44, 0x81, 0x56, 0x51, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x5e, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x5a, 0x70, 0x1c, 0x18, 0x47, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x4e, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x0c, 0x72, 0x56, 0x00, 0x00, 0x0f, 0x46, 0x3d, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x45, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x28, 0x81, 0x31, 0x00, 0x00, 0x00, 0x06, 0x3d, 0x49, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x46, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x4b, 0x7b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x4f, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x49, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x6c, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x50, 0x48, 0x16, 0x00, 0x00, 0x00, 0x00, 0x18, 0x49, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x87, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x5c, 0x73, 0x1b, 0x00, 0x00, 0x00, 0x33, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d},
    {0xab, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x73, 0x93, 0x4a, 0x1f, 0x28, 0x73, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f},
    {0x9c, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8a, 0x80, 0x72, 0x97, 0xc3, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x6b, 0xb2},
    {0x1b, 0x48, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x34, 0x15, 0x0e, 0x20, 0x4a, 0x9a, 0xa1, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x7b, 0x74, 0x28},
    {0x00, 0x02, 0x3a, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x21, 0x02, 0x00, 0x00, 0x00, 0x00, 0x25, 0x97, 0xad, 0x68, 0x42, 0x39, 0x38, 0x13, 0x00, 0x00, 0x2f, 0x86, 0x56, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x00, 0x27, 0x30, 0x00, 0x00, 0x00, 0x1c, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xa5, 0xe8, 0xb8, 0xb7, 0x9d, 0x55, 0x26, 0x46, 0x89, 0x3a, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x06, 0x3e, 0x10, 0x00, 0x1a, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x9c, 0x74, 0x49, 0x5c, 0x8b, 0xb8, 0xc2, 0xc0, 0x68, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x36, 0x3e, 0x26, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x70, 0x51, 0x00, 0x00, 0x00, 0x00, 0x38, 0xdd, 0xf6, 0x3a, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x35, 0x76, 0x45, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0xd4, 0x63, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x01, 0x55, 0x9a, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x6a, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x94, 0x14, 0x00, 0x00, 0x00},
    {0x01, 0x02, 0x03, 0x11, 0x4f, 0x7c, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x71, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x91, 0x31, 0x08, 0x03, 0x01},
    {0x04, 0x04, 0x03, 0x05, 0x1d, 0x5e, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x86, 0x1f, 0x05, 0x04, 0x05},
    {0x00, 0x00, 0x00, 0x00, 0x06, 0x4e, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x98, 0x1e, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x03, 0x53, 0x51, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x94, 0x9a, 0x4a, 0x07, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x24, 0x6c, 0x79, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x68, 0x84, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x6f, 0x6a, 0x3c, 0x49, 0x41, 0x15, 0x00},
    {0x08, 0x00, 0x0c, 0x2a, 0x3d, 0x35, 0x3f, 0x56, 0x42, 0x16, 0x00, 0x00, 0x00, 0x03, 0x19, 0x51, 0xa2, 0xc8, 0x7c, 0x28, 0x08, 0x00, 0x0b, 0x3c, 0x6d, 0x4e, 0x0c, 0x00, 0x04, 0x29, 0x46, 0x2b},
    {0x48, 0x3b, 0x42, 0x2b, 0x09, 0x00, 0x00, 0x15, 0x4e, 0x66, 0x57, 0x4c, 0x53, 0x67, 0x7c, 0x82, 0x79, 0x78, 0x8b, 0x88, 0x7c, 0x81, 0x86, 0x76, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x45},
    {0x51, 0x6d, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0xb8, 0xae, 0xb2, 0xa3, 0x6a, 0x35, 0x14, 0x0a, 0x16, 0x33, 0x57, 0x8a, 0x88, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b},
    {0x24, 0x4d, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x51, 0x74, 0x67, 0x53, 0x53, 0x5b, 0x42, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x47, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x12, 0x3d, 0x0e, 0x00, 0x00, 0x01, 0x29, 0x57, 0x53, 0x23, 0x03, 0x00, 0x00, 0x0a, 0x2e, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x60, 0x38, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x1f, 0x4e, 0x2a, 0x06, 0x1c, 0x48, 0x58, 0x36, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x29, 0x23, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x42, 0x61, 0x5f, 0x52, 0x45, 0x34, 0x20, 0x0d, 0x00, 0x00},
    {0x5b, 0x85, 0x6d, 0x54, 0x55, 0x3f, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x2d, 0x22, 0x00, 0x00, 0x15, 0x36, 0x2c, 0x14, 0x14, 0x25, 0x39, 0x4b, 0x52, 0x4f, 0x45, 0x42},
    {0x75, 0xaf, 0xb7, 0x6b, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3d, 0x36, 0x33, 0x38, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x1c, 0x38, 0x54, 0x63},
    {0x27, 0x71, 0xa8, 0x4f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x71, 0x59, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x18, 0x16},
    {0x00, 0x34, 0x8f, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x6a, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x1e, 0x91, 0x81, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x5d, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x22, 0x89, 0x90, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x5d, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x33, 0x7c, 0x5a, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x5d, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x4b, 0x71, 0x21, 0x17, 0x42, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x52, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x03, 0x65, 0x59, 0x01, 0x00, 0x0b, 0x3f, 0x3f, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x19, 0x75, 0x34, 0x00, 0x00, 0x00, 0x02, 0x34, 0x48, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x3b, 0x73, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x4c, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x71, 0x6b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x52, 0x48, 0x1e, 0x0d, 0x0e, 0x0b, 0x12, 0x57, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0xbf, 0x72, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x6e, 0x86, 0x6c, 0x69, 0x6d, 0x86, 0x9b, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d},
    {0x71, 0x68, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x4b, 0x48, 0x3b, 0x3e, 0x4e, 0x7b, 0xb0, 0x74, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x6b, 0x89},
    {0x00, 0x11, 0x47, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x28, 0x12, 0x00, 0x00, 0x00, 0x00, 0x07, 0x4a, 0x97, 0x59, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x7c, 0x5d, 0x12},
    {0x00, 0x00, 0x0c, 0x40, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x1e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0xa3, 0x73, 0x42, 0x3e, 0x20, 0x00, 0x00, 0x00, 0x32, 0x7f, 0x3f, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x00, 0x00, 0x53, 0x3e, 0x25, 0x2c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x6a, 0xf4, 0xf3, 0xc5, 0x8c, 0x4c, 0x45, 0x64, 0x86, 0x41, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x37, 0x89, 0x58, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x7f, 0xae, 0x77, 0x7e, 0xba, 0xdd, 0x9b, 0x5d, 0x42, 0x02, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x25, 0xaa, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x83, 0x17, 0x00, 0x00, 0x14, 0x8f, 0xa9, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x2c, 0x9d, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x76, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0x7f, 0x34, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x43, 0x90, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9d, 0x5b, 0x06, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x70, 0x83, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xa2, 0xa6, 0x3b, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x33, 0xb4, 0x78, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x86, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xac, 0xd8, 0xa8, 0x56, 0x07, 0x00},
    {0x2e, 0x2b, 0x42, 0x92, 0xd5, 0x98, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x61, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x94, 0x71, 0x84, 0xab, 0x8d, 0x4c},
    {0x77, 0x67, 0x7f, 0x7d, 0x6c, 0x75, 0x72, 0x3c, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x20, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x77, 0x33, 0x04, 0x08, 0x32, 0x7d, 0x99},
    {0x87, 0x89, 0x54, 0x14, 0x00, 0x05, 0x30, 0x62, 0x5d, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x10, 0x26, 0x03, 0x26, 0x77, 0x34, 0x00, 0x00, 0x0d, 0x4a, 0x6d, 0x26, 0x00, 0x00, 0x00, 0x00, 0x04, 0x47},
    {0x5f, 0x73, 0x07, 0x00, 0x00, 0x00, 0x00, 0x09, 0x48, 0x6e, 0x45, 0x16, 0x12, 0x34, 0x7b, 0x80, 0x5e, 0x76, 0xb5, 0xb4, 0x80, 0x74, 0x7b, 0x64, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x3b, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x81, 0x8f, 0x91, 0x9d, 0x9a, 0x7b, 0x5e, 0x53, 0x4e, 0x66, 0x99, 0xb9, 0x6b, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x35, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xe0, 0xb8, 0x65, 0x2e, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x50, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x30, 0x4f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x8d, 0xa4, 0x72, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x46, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x27, 0x4f, 0x05, 0x00, 0x00, 0x00, 0x00, 0x07, 0x4a, 0x7b, 0x58, 0x29, 0x38, 0x3d, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x1f, 0x53, 0x10, 0x00, 0x00, 0x00, 0x2e, 0x6b, 0x6f, 0x30, 0x00, 0x00, 0x00, 0x24, 0x38, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x54, 0x3e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x33, 0x6e, 0x39, 0x08, 0x20, 0x58, 0x74, 0x4e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x34, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x5b, 0x8f, 0x63, 0x3e, 0x26, 0x11, 0x04, 0x00, 0x02},
    {0x80, 0xb9, 0x92, 0x6b, 0x6f, 0x59, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x02, 0x36, 0x50, 0x4a, 0x53, 0x64, 0x6f, 0x73, 0x6e, 0x5f, 0x5e},
    {0x7f, 0xca, 0xea, 0x96, 0x3b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x2a, 0x00, 0x00, 0x0f, 0x35, 0x2f, 0x0a, 0x00, 0x00, 0x0f, 0x37, 0x5f, 0x68, 0x63, 0x66},
    {0x18, 0x69, 0xcb, 0x75, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x45, 0x3e, 0x34, 0x44, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x09, 0x00, 0x01, 0x06},
    {0x00, 0x29, 0xa3, 0x7c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x81, 0x75, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x15, 0xa0, 0xa5, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x77, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x1a, 0x99, 0xb3, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x68, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x2c, 0x8e, 0x73, 0x5d, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x68, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x48, 0x84, 0x2e, 0x19, 0x49, 0x3f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x64, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x65, 0x6a, 0x04, 0x00, 0x08, 0x43, 0x4c, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x11, 0x80, 0x46, 0x00, 0x00, 0x00, 0x00, 0x33, 0x55, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x65, 0xa9, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x66, 0x55, 0x2e, 0x1c, 0x14, 0x0f, 0x0f, 0x32, 0x84, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0xc4, 0xc0, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x9b, 0x94, 0x7a, 0x76, 0x73, 0x74, 0x9b, 0xcf, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x5f},
    {0x4d, 0x46, 0x6a, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x4c, 0x31, 0x2b, 0x31, 0x38, 0x41, 0x60, 0xa9, 0xab, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x84, 0x87},
    {0x00, 0x00, 0x1b, 0x56, 0x12, 0x00, 0x00, 0x00, 0x1c, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x8d, 0x90, 0x25, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x97, 0x5b, 0x06},
    {0x00, 0x00, 0x00, 0x29, 0x4d, 0x02, 0x00, 0x17, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x9f, 0xa0, 0x64, 0x3e, 0x08, 0x00, 0x00, 0x0c, 0x58, 0x9a, 0x3e, 0x00, 0x00}
  },
  {
    {0x00, 0x00, 0x00, 0x00, 0x34, 0xaf, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xb9, 0xff, 0xbb, 0x7e, 0x5c, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x23, 0xa0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0xa3, 0xae, 0xbc, 0xb6, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x25, 0x91, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x6a, 0x57, 0x00, 0x0d, 0x6d, 0x73, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x32, 0x8d, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6b, 0x00, 0x00, 0x00, 0x03, 0x71, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x4d, 0x89, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x8d, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x31, 0x7d, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x00, 0x00, 0x00, 0x92, 0x8c, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0e, 0x2f, 0x69, 0x23, 0x00, 0x00, 0x00, 0x00, 0x03, 0x98, 0x8b, 0x25, 0x0d, 0x17, 0x03, 0x00},
    {0x00, 0x00, 0x18, 0x80, 0xf2, 0xb1, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0f, 0x0a, 0x00, 0x13, 0x18, 0x00, 0x00, 0x00, 0x00, 0x16, 0xa0, 0xa4, 0x7a, 0x6e, 0x68, 0x53, 0x1f},
    {0x88, 0x8a, 0xa7, 0xad, 0x93, 0x8c, 0x82, 0x41, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x08, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x06, 0x61, 0x5b, 0x27, 0x31, 0x51, 0x75, 0x93, 0x9f},
    {0xd5, 0xd9, 0x72, 0x1d, 0x01, 0x0e, 0x3d, 0x70, 0x67, 0x22, 0x00, 0x00, 0x00, 0x04, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x18, 0x00, 0x1d, 0x52, 0x41, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x32, 0x7b},
    {0x7e, 0x77, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x51, 0x78, 0x45, 0x0c, 0x09, 0x37, 0x1a, 0x00, 0x00, 0x00, 0x08, 0x8a, 0xb3, 0x6f, 0x5e, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d},
    {0x4e, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x7f, 0x7a, 0x77, 0xa2, 0x72, 0x39, 0x32, 0x43, 0x73, 0xae, 0xdc, 0x99, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x4b, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xac, 0xdf, 0xb3, 0x88, 0x70, 0x61, 0x56, 0x47, 0x34, 0x59, 0x6a, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x4b, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x8f, 0x9d, 0x38, 0x16, 0x0e, 0x05, 0x00, 0x00, 0x00, 0x05, 0x4c, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x45, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x9d, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x50, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x3d, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x99, 0xa3, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x2f, 0x59, 0x04, 0x00, 0x00, 0x00, 0x00, 0x09, 0x50, 0x88, 0x69, 0x45, 0x4f, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x4f, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x28, 0x62, 0x16, 0x00, 0x00, 0x00, 0x36, 0x76, 0x7a, 0x36, 0x04, 0x00, 0x16, 0x3c, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x50, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x47, 0x86, 0x4b, 0x10, 0x29, 0x63, 0x7f, 0x54, 0x10, 0x00, 0x00, 0x00, 0x00, 0x11, 0x39, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x6f, 0x79, 0x36, 0x1c, 0x15, 0x0f, 0x0b, 0x11},
    {0x93, 0xd4, 0xb1, 0x7d, 0x7b, 0x5e, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x37, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x71, 0x8d, 0x8c, 0x8b, 0x7f, 0x77, 0x70, 0x72},
    {0x6f, 0xbb, 0xfa, 0xaa, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x34, 0x01, 0x00, 0x00, 0x00, 0x00, 0x27, 0x47, 0x33, 0x2f, 0x4d, 0x4d, 0x45, 0x49, 0x4e, 0x54},
    {0x08, 0x4e, 0xc3, 0x86, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x00, 0x0a, 0x33, 0x33, 0x0c, 0x00, 0x09, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x1c, 0x93, 0x84, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x40, 0x2e, 0x44, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x13, 0x80, 0x94, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x77, 0x78, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x14, 0x7e, 0xa9, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x70, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x1d, 0x89, 0x82, 0x62, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x63, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x00, 0x47, 0x90, 0x41, 0x22, 0x47, 0x3e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x61, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x18, 0x7a, 0x81, 0x23, 0x00, 0x07, 0x3e, 0x4e, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x64, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    {0x4e, 0x4f, 0x5b, 0x27, 0x00, 0x00, 0x00, 0x3c, 0x6a, 0x58, 0x3b, 0x2e, 0x26, 0x1f, 0x1a, 0x16, 0x23, 0x71, 0x75, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26},
    {0x23, 0x15, 0x4f, 0x46, 0x00, 0x00, 0x00, 0x03, 0x65, 0x9a, 0x80, 0x77, 0x77, 0x77, 0x76, 0x73, 0x84, 0xc3, 0xa2, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x42, 0x4b},
    {0x05, 0x0c, 0x37, 0x6e, 0x23, 0x00, 0x00, 0x19, 0x44, 0x2a, 0x18, 0x18, 0x1d, 0x26, 0x2d, 0x33, 0x44, 0x7b, 0xb2, 0x6a, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x2f, 0x51, 0x40, 0x15},
    {0x02, 0x00, 0x00, 0x3c, 0x65, 0x15, 0x16, 0x30, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x55, 0x9f, 0x60, 0x28, 0x02, 0x00, 0x00, 0x00, 0x20, 0x42, 0x41, 0x1d, 0x05, 0x03},
    {0x00, 0x00, 0x00, 0x00, 0x5e, 0x74, 0x4e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xb5, 0x7f, 0x31, 0x12, 0x23, 0x3d, 0x3d, 0x1d, 0x00, 0x00, 0x00, 0x00}
  }
};
uint8_t GIFframe = 0U;  // текущий кадр анимации (не важно, какой в начале)
uint8_t GIFshiftx = 0U; // какой-то там сдвиг текстуры по радиусу лампы
uint8_t GIFshifty = 0U; // какой-то там сдвиг текстуры по высоте

#define CAUSTICS_BR                     (100U)                // яркость бликов в процентах (от чистого белого света)

void poolRoutine()
{
  if (modes[currentMode].Speed != 255U) // если регулятор скорости на максимуме, то будет работать старый эффект "цвет" (без анимации бликов воды)
  {
    if (GIFframe > 24U) // количество кадров в анимации -1 (отсчёт с нуля)
      GIFframe = 0U;
    if (GIFframe > 0U && GIFframe < 3U) // пару раз за цикл анимации двигаем текстуру по радиусу лампы. а может и не двигаем. как повезёт
    {
      if (random(2U) == 0U)
      {
        GIFshiftx++;
        if (GIFshiftx > 31U) GIFshiftx = 0U;
      }
    }
    if (GIFframe > 11U && GIFframe < 14U) // пару раз за цикл анимации двигаем текстуру по вертикали. а может и не двигаем. как повезёт
    {
      if (random(2U) == 0U)
      {
        GIFshifty++;
        if (GIFshifty > 31U) GIFshifty = 0U;
      }
    }

    for (uint8_t x = 0U; x < WIDTH ; x++) {
      for (uint8_t y = 0U; y < HEIGHT; y++) {
        // y%32, x%32 - это для масштабирования эффекта на лампы размером большим, чем размер анимации 32х32, а также для произвольного сдвига текстуры
        leds[XY(x, y)] = CHSV(modes[currentMode].Scale * 2.55, 255U - pgm_read_byte(&aquariumGIF[GIFframe][(y + GIFshifty) % 32U][(x + GIFshiftx) % 32U]) * CAUSTICS_BR / 100U, 255U);
        // чтобы регулятор Масштаб начал вместо цвета регулировать яркость бликов, нужно закомментировать предыдущую строчку и раскоментировать следующую
        //        leds[XY(x, y)] = CHSV(158U, 255U - pgm_read_byte(&aquariumGIF[GIFframe][(y+GIFshifty)%32U][(x+GIFshiftx)%32U]) * modes[currentMode].Scale / 100U, 255U);
      }
    }
    GIFframe++;
  }
  else if (loadingFlag)
  {
    loadingFlag = false;
    FastLED.clear();

    for (int16_t i = 0U; i < NUM_LEDS; i++)
    {
      leds[i] = CHSV(modes[currentMode].Scale * 2.55, 255U, 255U);
    }
  }
}

// ------------- цвета -----------------
void colorsRoutine()
{
  if (loadingFlag)
  {
    hue += modes[currentMode].Scale;

    for (uint16_t i = 0U; i < NUM_LEDS; i++)
    {
      leds[i] = CHSV(hue, 255U, 255U);
    }
  }
}

// ------------- цвет ------------------
void colorRoutine()
{
  if (loadingFlag)
  {
    loadingFlag = false;
    FastLED.clear();

    for (int16_t i = 0U; i < NUM_LEDS; i++)
    {
      leds[i] = CHSV(modes[currentMode].Scale * 2.5, 255U, 255U);
    }
  }
}

// ------------- снегопад ----------
void snowRoutine()
{
  // сдвигаем всё вниз
  for (uint8_t x = 0U; x < WIDTH; x++)
  {
    for (uint8_t y = 0U; y < HEIGHT - 1; y++)
    {
      drawPixelXY(x, y, getPixColorXY(x, y + 1U));
    }
  }

  for (uint8_t x = 0U; x < WIDTH; x++)
  {
    // заполняем случайно верхнюю строку
    // а также не даём двум блокам по вертикали вместе быть
    if (getPixColorXY(x, HEIGHT - 2U) == 0U && (random(0, 100 - modes[currentMode].Scale) == 0U))
      drawPixelXY(x, HEIGHT - 1U, 0xE0FFFF - 0x101010 * random(0, 4));
    else
      drawPixelXY(x, HEIGHT - 1U, 0x000000);
  }
}

// ------------- метель -------------
#define SNOW_DENSE            (60U)                         // плотность снега
#define SNOW_TAIL_STEP        (100U)                        // длина хвоста
#define SNOW_SATURATION       (0U)                          // насыщенность (от 0 до 255)
void snowStormRoutine()
{
  if (loadingFlag)
  {
    loadingFlag = false;
    FastLED.clear();
  }

  // заполняем головами комет левую и верхнюю линию
  //  for (uint8_t i = HEIGHT / 2U; i < HEIGHT; i++)
  //  {
  //    if (getPixColorXY(0U, i) == 0U &&
  //       (random(0, SNOW_DENSE) == 0) &&
  //        getPixColorXY(0U, i + 1U) == 0U &&
  //        getPixColorXY(0U, i - 1U) == 0U)
  //    {
  //      leds[XY(0U, i)] = CHSV(random(0, 200), SNOW_SATURATION, 255U);
  //    }
  //  }

  //  for (uint8_t i = 0U; i < WIDTH / 2U; i++)
  for (uint8_t i = 0U; i < WIDTH; i++)
  {
    if (getPixColorXY(i, HEIGHT - 1U) == 0U &&
        (random(0, map(modes[currentMode].Scale, 0U, 255U, 10U, 120U)) == 0U) &&
        getPixColorXY(i + 1U, HEIGHT - 1U) == 0U &&
        getPixColorXY(i - 1U, HEIGHT - 1U) == 0U)
    {
      leds[XY(i, HEIGHT - 1U)] = CHSV(random(0, 200), SNOW_SATURATION, 255U);
    }
  }

  // сдвигаем по диагонали
  for (uint8_t y = 0U; y < HEIGHT - 1U; y++)
  {
    for (uint8_t x = WIDTH - 1U; x > 0U; x--)
    {
      drawPixelXY(x, y, getPixColorXY(x - 1U, y + 1U));
    }
    drawPixelXY(0, y, getPixColorXY(WIDTH - 1U, y + 1U));
  }

  // уменьшаем яркость левой и верхней линии, формируем "хвосты"
  //  for (uint8_t i = HEIGHT / 2U; i < HEIGHT; i++)
  //  {
  //    fadePixel(0U, i, SNOW_TAIL_STEP);
  //  }
  for (uint8_t i = 0U; i < WIDTH; i++)
    //  for (uint8_t i = 0U; i < WIDTH / 2U; i++)
  {
    fadePixel(i, HEIGHT - 1U, SNOW_TAIL_STEP);
  }
}

// ------------- звездопад -------------
#define STAR_DENSE            (60U)                         // плотность комет
#define STAR_TAIL_STEP        (100U)                        // длина хвоста кометы
#define STAR_SATURATION       (150U)                        // насыщенность кометы (от 0 до 255)
void starfallRoutine()
{
  if (loadingFlag)
  {
    loadingFlag = false;
    FastLED.clear();
  }

  // заполняем головами комет левую и верхнюю линию
  //  for (uint8_t i = HEIGHT / 2U; i < HEIGHT; i++)
  //  {
  //    if (getPixColorXY(0U, i) == 0U &&
  //       (random(0, STAR_DENSE) == 0) &&
  //        getPixColorXY(0U, i + 1U) == 0U &&
  //        getPixColorXY(0U, i - 1U) == 0U)
  //    {
  //      leds[XY(0U, i)] = CHSV(random(0, 200), STAR_SATURATION, 255U);
  //    }
  //  }

  //  for (uint8_t i = 0U; i < WIDTH / 2U; i++)
  for (uint8_t i = 0U; i < WIDTH; i++)
  {
    if (getPixColorXY(i, HEIGHT - 1U) == 0U &&
        (random(0, map(modes[currentMode].Scale, 0U, 255U, 10U, 120U)) == 0U) &&
        getPixColorXY(i + 1U, HEIGHT - 1U) == 0U &&
        getPixColorXY(i - 1U, HEIGHT - 1U) == 0U)
    {
      leds[XY(i, HEIGHT - 1U)] = CHSV(random(0, 200), STAR_SATURATION, 255U);
    }
  }

  // сдвигаем по диагонали
  for (uint8_t y = 0U; y < HEIGHT - 1U; y++)
  {
    for (uint8_t x = WIDTH - 1U; x > 0U; x--)
    {
      drawPixelXY(x, y, getPixColorXY(x - 1U, y + 1U));
    }
    drawPixelXY(0U, y, getPixColorXY(WIDTH - 1U, y + 1U));
  }

  // уменьшаем яркость левой и верхней линии, формируем "хвосты"
  //  for (uint8_t i = HEIGHT / 2U; i < HEIGHT; i++)
  //  {
  //    fadePixel(0U, i, STAR_TAIL_STEP);
  //  }
  //  for (uint8_t i = 0U; i < WIDTH / 2U; i++)
  for (uint8_t i = 0U; i < WIDTH; i++)
  {
    fadePixel(i, HEIGHT - 1U, STAR_TAIL_STEP);
  }
}

// ------------- матрица ---------------
void matrixRoutine()
{
  for (uint8_t x = 0U; x < WIDTH; x++)
  {
    // обрабатываем нашу матрицу снизу вверх до второй сверху строчки
    for (uint8_t y = 0U; y < HEIGHT - 1U; y++)
    {
      uint32_t thisColor = getPixColorXY(x, y);                                              // берём цвет нашего пикселя
      uint32_t upperColor = getPixColorXY(x, y + 1U);                                        // берём цвет пикселя над нашим
      if (upperColor >= 0x900000 && random(7 * HEIGHT) != 0U)                  // если выше нас максимальная яркость, игнорим этот факт с некой вероятностью или опускаем цепочку ниже
        drawPixelXY(x, y, upperColor);
      else if (thisColor == 0U && random((100 - modes[currentMode].Scale) * HEIGHT) == 0U)  // если наш пиксель ещё не горит, иногда зажигаем новые цепочки
        //else if (thisColor == 0U && random((100 - modes[currentMode].Scale) * HEIGHT*3) == 0U)  // для длинных хвостов
        drawPixelXY(x, y, 0x9bf800);
      else if (thisColor <= 0x050800)                                                        // если наш пиксель почти погас, стараемся сделать затухание медленней
      {
        if (thisColor >= 0x030000)
          drawPixelXY(x, y, 0x020300);
        else if (thisColor != 0U)
          drawPixelXY(x, y, 0U);
      }
      else if (thisColor >= 0x900000)                                                        // если наш пиксель максимальной яркости, резко снижаем яркость
        drawPixelXY(x, y, 0x558800);
      else
        drawPixelXY(x, y, thisColor - 0x0a1000);                                             // в остальных случаях снижаем яркость на 1 уровень
      //drawPixelXY(x, y, thisColor - 0x050800);                                             // для длинных хвостов
    }
    // аналогично обрабатываем верхний ряд пикселей матрицы
    uint32_t thisColor = getPixColorXY(x, HEIGHT - 1U);
    if (thisColor == 0U)                                                                     // если наш верхний пиксель не горит, заполняем его с вероятностью .Scale
    {
      if (random(100 - modes[currentMode].Scale) == 0U)
        drawPixelXY(x, HEIGHT - 1U, 0x9bf800);
    }
    else if (thisColor <= 0x050800)                                                          // если наш верхний пиксель почти погас, стараемся сделать затухание медленней
    {
      if (thisColor >= 0x030000)
        drawPixelXY(x, HEIGHT - 1U, 0x020300);
      else
        drawPixelXY(x, HEIGHT - 1U, 0U);
    }
    else if (thisColor >= 0x900000)                                                          // если наш верхний пиксель максимальной яркости, резко снижаем яркость
      drawPixelXY(x, HEIGHT - 1U, 0x558800);
    else
      drawPixelXY(x, HEIGHT - 1U, thisColor - 0x0a1000);                                     // в остальных случаях снижаем яркость на 1 уровень
    //drawPixelXY(x, HEIGHT - 1U, thisColor - 0x050800);                                     // для длинных хвостов
  }
}

// ------------- светлячки --------------
#define LIGHTERS_AM           (100U)
int32_t lightersPos[2U][LIGHTERS_AM];
int8_t lightersSpeed[2U][LIGHTERS_AM];
CHSV lightersColor[LIGHTERS_AM];
uint8_t loopCounter;
int32_t angle[LIGHTERS_AM];
int32_t speedV[LIGHTERS_AM];
int8_t angleSpeed[LIGHTERS_AM];
void lightersRoutine()
{
  if (loadingFlag)
  {
    loadingFlag = false;
    randomSeed(millis());
    if (modes[currentMode].Scale > LIGHTERS_AM) modes[currentMode].Scale = LIGHTERS_AM;
    for (uint8_t i = 0U; i < LIGHTERS_AM; i++)
    {
      lightersPos[0U][i] = random(0, WIDTH * 10);
      lightersPos[1U][i] = random(0, HEIGHT * 10);
      lightersSpeed[0U][i] = random(-10, 10);
      lightersSpeed[1U][i] = random(-10, 10);
      lightersColor[i] = CHSV(random(0U, 255U), 255U, 255U);
    }
  }
  FastLED.clear();
  if (++loopCounter > 20U) loopCounter = 0U;
  for (uint8_t i = 0U; i < modes[currentMode].Scale; i++)
  {
    if (loopCounter == 0U)                                  // меняем скорость каждые 255 отрисовок
    {
      lightersSpeed[0U][i] += random(-3, 4);
      lightersSpeed[1U][i] += random(-3, 4);
      lightersSpeed[0U][i] = constrain(lightersSpeed[0U][i], -20, 20);
      lightersSpeed[1U][i] = constrain(lightersSpeed[1U][i], -20, 20);
    }

    lightersPos[0U][i] += lightersSpeed[0U][i];
    lightersPos[1U][i] += lightersSpeed[1U][i];

    if (lightersPos[0U][i] < 0) lightersPos[0U][i] = (WIDTH - 1) * 10;
    if (lightersPos[0U][i] >= (int32_t)(WIDTH * 10)) lightersPos[0U][i] = 0;

    if (lightersPos[1U][i] < 0)
    {
      lightersPos[1U][i] = 0;
      lightersSpeed[1U][i] = -lightersSpeed[1U][i];
    }
    if (lightersPos[1U][i] >= (int32_t)(HEIGHT - 1) * 10)
    {
      lightersPos[1U][i] = (HEIGHT - 1U) * 10;
      lightersSpeed[1U][i] = -lightersSpeed[1U][i];
    }
    drawPixelXY(lightersPos[0U][i] / 10, lightersPos[1U][i] / 10, lightersColor[i]);
  }
}

// --------------------------- светлячки со шлейфом ---------------------
#define BALLS_AMOUNT          (3U)                          // количество "шариков"
#define CLEAR_PATH            (1U)                          // очищать путь
#define BALL_TRACK            (1U)                          // (0 / 1) - вкл/выкл следы шариков
#define TRACK_STEP            (70U)                         // длина хвоста шарика (чем больше цифра, тем хвост короче)
int16_t coord[BALLS_AMOUNT][2U];
int8_t vector[BALLS_AMOUNT][2U];
CRGB ballColors[BALLS_AMOUNT];
void ballsRoutine()
{
  if (loadingFlag)
  {
    loadingFlag = false;

    for (uint8_t j = 0U; j < BALLS_AMOUNT; j++)
    {
      int8_t sign;
      // забиваем случайными данными
      coord[j][0U] = WIDTH / 2 * 10;
      random(0, 2) ? sign = 1 : sign = -1;
      vector[j][0U] = random(4, 15) * sign;
      coord[j][1U] = HEIGHT / 2 * 10;
      random(0, 2) ? sign = 1 : sign = -1;
      vector[j][1U] = random(4, 15) * sign;
      //ballColors[j] = CHSV(random(0, 9) * 28, 255U, 255U);
      // цвет зависит от масштаба
      ballColors[j] = CHSV((modes[currentMode].Scale * (j + 1)) % 256U, 255U, 255U);
    }
  }

  if (!BALL_TRACK)                                          // режим без следов шариков
  {
    FastLED.clear();
  }
  else                                                      // режим со следами
  {
    fader(TRACK_STEP);
  }

  // движение шариков
  for (uint8_t j = 0U; j < BALLS_AMOUNT; j++)
  {
    // движение шариков
    for (uint8_t i = 0U; i < 2U; i++)
    {
      coord[j][i] += vector[j][i];
      if (coord[j][i] < 0)
      {
        coord[j][i] = 0;
        vector[j][i] = -vector[j][i];
      }
    }

    if (coord[j][0U] > (int16_t)((WIDTH - 1) * 10))
    {
      coord[j][0U] = (WIDTH - 1) * 10;
      vector[j][0U] = -vector[j][0U];
    }
    if (coord[j][1U] > (int16_t)((HEIGHT - 1) * 10))
    {
      coord[j][1U] = (HEIGHT - 1) * 10;
      vector[j][1U] = -vector[j][1U];
    }
    leds[XY(coord[j][0U] / 10, coord[j][1U] / 10)] =  ballColors[j];
  }
}

// ------------- пейнтбол -------------
#define BORDERTHICKNESS (1U) // глубина бордюра для размытия яркой частицы: 0U - без границы (резкие края); 1U - 1 пиксель (среднее размытие) ; 2U - 2 пикселя (глубокое размытие)
const uint8_t paintWidth = WIDTH - BORDERTHICKNESS * 2;
const uint8_t paintHeight = HEIGHT - BORDERTHICKNESS * 2;

void lightBallsRoutine()
{
  // Apply some blurring to whatever's already on the matrix
  // Note that we never actually clear the matrix, we just constantly
  // blur it repeatedly. Since the blurring is 'lossy', there's
  // an automatic trend toward black -- by design.
  uint8_t blurAmount = dim8_raw(beatsin8(3, 64, 100));
  blur2d(leds, WIDTH, HEIGHT, blurAmount);

  // Use two out-of-sync sine waves
  uint16_t i = beatsin16( 79, 0, 255); //91
  uint16_t j = beatsin16( 67, 0, 255); //109
  uint16_t k = beatsin16( 53, 0, 255); //73
  uint16_t m = beatsin16( 97, 0, 255); //123

  // The color of each point shifts over time, each at a different speed.
  uint32_t ms = millis() / (modes[currentMode].Scale / 4 + 1);
  leds[XY( highByte(i * paintWidth) + BORDERTHICKNESS, highByte(j * paintHeight) + BORDERTHICKNESS)] += CHSV( ms / 29, 200U, 255U);
  leds[XY( highByte(j * paintWidth) + BORDERTHICKNESS, highByte(k * paintHeight) + BORDERTHICKNESS)] += CHSV( ms / 41, 200U, 255U);
  leds[XY( highByte(k * paintWidth) + BORDERTHICKNESS, highByte(m * paintHeight) + BORDERTHICKNESS)] += CHSV( ms / 37, 200U, 255U);
  leds[XY( highByte(m * paintWidth) + BORDERTHICKNESS, highByte(i * paintHeight) + BORDERTHICKNESS)] += CHSV( ms / 53, 200U, 255U);
}

// ------------- блуждающий кубик -------------
#define RANDOM_COLOR          (1U)                          // случайный цвет при отскоке
int16_t coordB[2U];
int8_t vectorB[2U];
CRGB ballColor;
int8_t ballSize;
void ballRoutine()
{
  if (loadingFlag)
  {
    loadingFlag = false;
    //FastLED.clear();

    for (uint8_t i = 0U; i < 2U; i++)
    {
      coordB[i] = WIDTH / 2 * 10;
      vectorB[i] = random(8, 20);
      ballColor = CHSV(random(0, 9) * 28, 255U, 255U);
    }
  }

  ballSize = map(modes[currentMode].Scale * 2.55, 0U, 255U, 2U, max((uint8_t)min(WIDTH, HEIGHT) / 3, 2));
  for (uint8_t i = 0U; i < 2U; i++)
  {
    coordB[i] += vectorB[i];
    if (coordB[i] < 0)
    {
      coordB[i] = 0;
      vectorB[i] = -vectorB[i];
      if (RANDOM_COLOR) ballColor = CHSV(random(0, 9) * 28, 255U, 255U);
      //vectorB[i] += random(0, 6) - 3;
    }
  }
  if (coordB[0U] > (int16_t)((WIDTH - ballSize) * 10))
  {
    coordB[0U] = (WIDTH - ballSize) * 10;
    vectorB[0U] = -vectorB[0U];
    if (RANDOM_COLOR) ballColor = CHSV(random(0, 9) * 28, 255U, 255U);
    //vectorB[0] += random(0, 6) - 3;
  }
  if (coordB[1U] > (int16_t)((HEIGHT - ballSize) * 10))
  {
    coordB[1U] = (HEIGHT - ballSize) * 10;
    vectorB[1U] = -vectorB[1U];
    if (RANDOM_COLOR)
    {
      ballColor = CHSV(random(0, 9) * 28, 255U, 255U);
    }
    //vectorB[1] += random(0, 6) - 3;
  }
  FastLED.clear();
  for (uint8_t i = 0U; i < ballSize; i++)
  {
    for (uint8_t j = 0U; j < ballSize; j++)
    {
      leds[XY(coordB[0U] / 10 + i, coordB[1U] / 10 + j)] = ballColor;
    }
  }
}

// ------------- белый свет старый -------------
//////void whiteColorRoutine()
//////{
//////  if (loadingFlag)
//////  {
//////    loadingFlag = false;
//////    FastLED.clear();
//////
//////    for (uint16_t i = 0U; i < NUM_LEDS; i++)
//////    {
//////      leds[i] = CHSV(0U, 0U, 255U);
//////    }
//////  }
//////}

// ------------- белый свет (светится горизонтальная полоса по центру лампы; масштаб - высота центральной горизонтальной полосы; скорость - регулировка от холодного к тёплому; яркость - общая яркость) -------------
void whiteColorStripeRoutine()
{
  if (loadingFlag)
  {
    loadingFlag = false;
    FastLED.clear();
    delay(1);

    uint8_t centerY = max((uint8_t)round(HEIGHT / 2.0F) - 1, 0);
    uint8_t bottomOffset = (uint8_t)(!(HEIGHT & 1) && (HEIGHT > 1));                      // если высота матрицы чётная, линий с максимальной яркостью две, а линии с минимальной яркостью снизу будут смещены на один ряд
    for (int16_t y = centerY; y >= 0; y--)
    {
      CRGB color = CHSV(
                     45U,                                                                              // определяем тон
                     map(modes[currentMode].Speed, 0U, 255U, 0U, 170U),                                // определяем насыщенность
                     y == centerY                                                                      // определяем яркость
                     ? 255U                                                                          // для центральной горизонтальной полосы (или двух) яркость всегда равна 255
                     : (modes[currentMode].Scale / 100.0F) > ((centerY + 1.0F) - (y + 1.0F)) / (centerY + 1.0F) ? 255U : 0U);  // для остальных горизонтальных полос яркость равна либо 255, либо 0 в зависимости от масштаба

      for (uint8_t x = 0U; x < WIDTH; x++)
      {
        drawPixelXY(x, y, color);                                                         // при чётной высоте матрицы максимально яркими отрисуются 2 центральных горизонтальных полосы
        drawPixelXY(x, max((uint8_t)(HEIGHT - 1U) - (y + 1U) + bottomOffset, 0U), color); // при нечётной - одна, но дважды
      }
    }
  }
}

// ------------- мигающий цвет (не эффект! используется для отображения краткосрочного предупреждения; блокирующий код!) -------------
#define WARNING_BRIGHTNESS    (10U)                         // яркость вспышки
void showWarning(
  CRGB color,                                               /* цвет вспышки                                                 */
  uint32_t duration,                                        /* продолжительность отображения предупреждения (общее время)   */
  uint16_t blinkHalfPeriod)                                 /* продолжительность одной вспышки в миллисекундах (полупериод) */
{
  uint32_t blinkTimer = millis();
  enum BlinkState { OFF = 0, ON = 1 } blinkState = BlinkState::OFF;
  FastLED.setBrightness(WARNING_BRIGHTNESS);                // установка яркости для предупреждения
  FastLED.clear();
  delay(2);
  FastLED.show();

  for (uint16_t i = 0U; i < NUM_LEDS; i++)                  // установка цвета всех диодов в WARNING_COLOR
  {
    leds[i] = color;
  }

  uint32_t startTime = millis();
  while (millis() - startTime <= (duration + 5))            // блокировка дальнейшего выполнения циклом на время отображения предупреждения
  {
    if (millis() - blinkTimer >= blinkHalfPeriod)           // переключение вспышка/темнота
    {
      blinkTimer = millis();
      blinkState = (BlinkState)!blinkState;
      FastLED.setBrightness(blinkState == BlinkState::OFF ? 0 : WARNING_BRIGHTNESS);
      delay(1);
      FastLED.show();
    }
    delay(50);
  }

  FastLED.clear();
  FastLED.setBrightness(ONflag ? modes[currentMode].Brightness : 0);  // установка яркости, которая была выставлена до вызова предупреждения
  delay(1);
  FastLED.show();
  loadingFlag = true;                                       // принудительное отображение текущего эффекта (того, что был активен перед предупреждением)
}

// --------------------------- эффект кометы ----------------------

// далее идут общие процедуры для эффектов от Stefan Petrick, а непосредственно Комета - в самом низу
CRGB ledsbuff[NUM_LEDS];
const uint8_t e_centerX =  (WIDTH / 2) - 1;
const uint8_t e_centerY = (HEIGHT / 2) - 1;
int8_t zD;
int8_t zF;
// The coordinates for 3 16-bit noise spaces.
#define NUM_LAYERS 1 // в кометах используется 1 слой, но для огня 2018 нужно 2
#define NUM_LAYERSMAX 2

uint32_t e_x[NUM_LAYERSMAX];
uint32_t e_y[NUM_LAYERSMAX];
uint32_t e_z[NUM_LAYERSMAX];
uint32_t e_scaleX[NUM_LAYERSMAX];
uint32_t e_scaleY[NUM_LAYERSMAX];

uint8_t noise3d[NUM_LAYERSMAX][WIDTH][HEIGHT];

uint8_t eNs_noisesmooth;
bool eNs_isSetupped;

void eNs_setup() {
  eNs_noisesmooth = 200;
  for (int i = 0; i < NUM_LAYERS; i++) {
    e_x[i] = random16();
    e_y[i] = random16();
    e_z[i] = random16();
    e_scaleX[i] = 6000;
    e_scaleY[i] = 6000;
  }
  eNs_isSetupped = true;
}

void FillNoise(int8_t layer) {
  for (int8_t i = 0; i < WIDTH; i++) {
    int32_t ioffset = e_scaleX[layer] * (i - e_centerX);
    for (int8_t j = 0; j < HEIGHT; j++) {
      int32_t joffset = e_scaleY[layer] * (j - e_centerY);
      int8_t data = inoise16(e_x[layer] + ioffset, e_y[layer] + joffset, e_z[layer]) >> 8;
      int8_t olddata = noise3d[layer][i][j];
      int8_t newdata = scale8( olddata, eNs_noisesmooth ) + scale8( data, 255 - eNs_noisesmooth );
      data = newdata;
      noise3d[layer][i][j] = data;
    }
  }
}

void MoveX(int8_t delta) {
  //CLS2();
  for (uint8_t y = 0; y < HEIGHT; y++) {
    for (uint8_t x = 0; x < WIDTH - delta; x++) {
      ledsbuff[XY(x, y)] = leds[XY(x + delta, y)];
    }
    for (uint8_t x = WIDTH - delta; x < WIDTH; x++) {
      ledsbuff[XY(x, y)] = leds[XY(x + delta - WIDTH, y)];
    }
  }
  //CLS();
  // write back to leds
  memcpy(leds, ledsbuff, sizeof(CRGB)* NUM_LEDS);
  //какого хера тут было поштучное копирование - я хз
  //for (uint8_t y = 0; y < HEIGHT; y++) {
  //  for (uint8_t x = 0; x < WIDTH; x++) {
  //    leds[XY(x, y)] = ledsbuff[XY(x, y)];
  //  }
  //}
}

void MoveY(int8_t delta) {
  //CLS2();
  for (uint8_t x = 0; x < WIDTH; x++) {
    for (uint8_t y = 0; y < HEIGHT - delta; y++) {
      ledsbuff[XY(x, y)] = leds[XY(x, y + delta)];
    }
    for (uint8_t y = HEIGHT - delta; y < HEIGHT; y++) {
      ledsbuff[XY(x, y)] = leds[XY(x, y + delta - HEIGHT)];
    }
  }
  //CLS();
  // write back to leds
  memcpy(leds, ledsbuff, sizeof(CRGB)* NUM_LEDS);
  //какого хера тут было поштучное копирование - я хз
  //for (uint8_t y = 0; y < HEIGHT; y++) {
  //  for (uint8_t x = 0; x < WIDTH; x++) {
  //    leds[XY(x, y)] = ledsbuff[XY(x, y)];
  //  }
  //}
}

void MoveFractionalNoiseX(int8_t amplitude = 1, float shift = 0) {
  for (int8_t y = 0; y < HEIGHT; y++) {
    int16_t amount = ((int16_t)noise3d[0][0][y] - 128) * 2 * amplitude + shift * 256  ;
    int8_t delta = abs(amount) >> 8 ;
    int8_t fraction = abs(amount) & 255;
    for (int8_t x = 0 ; x < WIDTH; x++) {
      if (amount < 0) {
        zD = x - delta; zF = zD - 1;
      } else {
        zD = x + delta; zF = zD + 1;
      }
      CRGB PixelA = CRGB::Black  ;
      if ((zD >= 0) && (zD < WIDTH)) PixelA = leds[XY(zD, y)];
      CRGB PixelB = CRGB::Black ;
      if ((zF >= 0) && (zF < WIDTH)) PixelB = leds[XY(zF, y)];
      ledsbuff[XY(x, y)] = (PixelA.nscale8(ease8InOutApprox(255 - fraction))) + (PixelB.nscale8(ease8InOutApprox(fraction)));   // lerp8by8(PixelA, PixelB, fraction );
    }
  }
  memcpy(leds, ledsbuff, sizeof(CRGB)* NUM_LEDS);
}

void MoveFractionalNoiseY(int8_t amplitude = 1, float shift = 0) {
  for (int8_t x = 0; x < WIDTH; x++) {
    int16_t amount = ((int16_t)noise3d[0][x][0] - 128) * 2 * amplitude + shift * 256 ;
    int8_t delta = abs(amount) >> 8 ;
    int8_t fraction = abs(amount) & 255;
    for (int8_t y = 0 ; y < WIDTH; y++) {
      if (amount < 0) {
        zD = y - delta; zF = zD - 1;
      } else {
        zD = y + delta; zF = zD + 1;
      }
      CRGB PixelA = CRGB::Black ;
      if ((zD >= 0) && (zD < WIDTH)) PixelA = leds[XY(x, zD)];
      CRGB PixelB = CRGB::Black ;
      if ((zF >= 0) && (zF < WIDTH)) PixelB = leds[XY(x, zF)];
      ledsbuff[XY(x, y)] = (PixelA.nscale8(ease8InOutApprox(255 - fraction))) + (PixelB.nscale8(ease8InOutApprox(fraction)));
    }
  }
  memcpy(leds, ledsbuff, sizeof(CRGB)* NUM_LEDS);
}

// NoiseSmearing(by StefanPetrick) Effect mod for GyverLamp by PalPalych
void MultipleStream() { // 2 comets
  //dimAll(192); // < -- затухание эффекта для последующего кадрв
  dimAll(255U - modes[currentMode].Scale * 2);


  // gelb im Kreis
  byte xx = 2 + sin8( millis() / 10) / 22;
  byte yy = 2 + cos8( millis() / 10) / 22;
  leds[XY( xx, yy)] = 0xFFFF00;

  // rot in einer Acht
  xx = 4 + sin8( millis() / 46) / 32;
  yy = 4 + cos8( millis() / 15) / 32;
  leds[XY( xx, yy)] = 0xFF0000;

  // Noise
  e_x[0] += 3000;
  e_y[0] += 3000;
  e_z[0] += 3000;
  e_scaleX[0] = 8000;
  e_scaleY[0] = 8000;
  FillNoise(0);
  MoveFractionalNoiseX(3, 0.33);
  MoveFractionalNoiseY(3);
}

void MultipleStream2() { // 3 comets
  //dimAll(220); // < -- затухание эффекта для последующего кадрв
  dimAll(255U - modes[currentMode].Scale * 2);

  byte xx = 2 + sin8( millis() / 10) / 22;
  byte yy = 2 + cos8( millis() / 9) / 22;
  leds[XY( xx, yy)] += 0x0000FF;

  xx = 4 + sin8( millis() / 10) / 32;
  yy = 4 + cos8( millis() / 7) / 32;
  leds[XY( xx, yy)] += 0xFF0000;
  leds[XY( e_centerX, e_centerY)] += 0xFFFF00;

  e_x[0] += 3000;
  e_y[0] += 3000;
  e_z[0] += 3000;
  e_scaleX[0] = 8000;
  e_scaleY[0] = 8000;
  FillNoise(0);
  MoveFractionalNoiseX(2);
  MoveFractionalNoiseY(2, 0.33);
}

void MultipleStream3() { // Fireline
  blurScreen(20); // без размытия как-то пиксельно, по-моему...
  //dimAll(160); // < -- затухание эффекта для последующего кадров
  dimAll(255U - modes[currentMode].Scale * 2);
  for (uint8_t i = 1; i < WIDTH; i += 3) {
    leds[XY( i, e_centerY)] += CHSV(i * 2 , 255, 255);
  }
  // Noise
  e_x[0] += 3000;
  e_y[0] += 3000;
  e_z[0] += 3000;
  e_scaleX[0] = 8000;
  e_scaleY[0] = 8000;
  FillNoise(0);
  MoveFractionalNoiseY(3);
  MoveFractionalNoiseX(3);
}


void MultipleStream5() { // Fractorial Fire
  blurScreen(20); // без размытия как-то пиксельно, по-моему...
  //dimAll(140); // < -- затухание эффекта для последующего кадрв
  dimAll(255U - modes[currentMode].Scale * 2);
  for (uint8_t i = 1; i < WIDTH; i += 2) {
    leds[XY( i, WIDTH - 1)] += CHSV(i * 2, 255, 255);
  }
  // Noise
  e_x[0] += 3000;
  e_y[0] += 3000;
  e_z[0] += 3000;
  e_scaleX[0] = 8000;
  e_scaleY[0] = 8000;
  FillNoise(0);
  //MoveX(1);
  //MoveY(1);
  MoveFractionalNoiseY(2, 1);
  MoveFractionalNoiseX(2);
}

void MultipleStream4() { // Comet
  //dimAll(184); // < -- затухание эффекта для последующего кадрв
  dimAll(255U - modes[currentMode].Scale * 2);
  
  CRGB _eNs_color = CHSV(millis(), 255, 255);
  leds[XY( e_centerX, e_centerY)] += _eNs_color;
  // Noise
  e_x[0] += 2000;
  e_y[0] += 2000;
  e_z[0] += 2000;
  e_scaleX[0] = 4000;
  e_scaleY[0] = 4000;
  FillNoise(0);
  MoveFractionalNoiseX(6);
  MoveFractionalNoiseY(5, -0.5);
}

void MultipleStream8() { // Windows ))
  dimAll(96); // < -- затухание эффекта для последующего кадрв на 96/255*100=37%
  //dimAll(255U - modes[currentMode].Scale * 2); // так какая-то хрень получается
  for (uint8_t y = 2; y < HEIGHT; y += 5) {
    for (uint8_t x = 2; x < WIDTH; x += 5) {
      leds[XY(x, y)]  += CHSV(x * y , 255, 255);
      leds[XY(x + 1, y)] += CHSV((x + 4) * y, 255, 255);
      leds[XY(x, y + 1)] += CHSV(x * (y + 4), 255, 255);
      leds[XY(x + 1, y + 1)] += CHSV((x + 4) * (y + 4), 255, 255);
    }
  }
  // Noise
  e_x[0] += 3000;
  e_y[0] += 3000;
  e_z[0] += 3000;
  e_scaleX[0] = 8000;
  e_scaleY[0] = 8000;
  FillNoise(0);
  MoveFractionalNoiseX(3);
  MoveFractionalNoiseY(3);
}

// прописывается, если ранее нигде не была объявлена (это часто используемая функция у эффектов Stefan Petrick)
void dimAll(uint8_t value) {
  for (uint16_t i = 0; i < NUM_LEDS; i++) {
    leds[i].nscale8(value); //fadeToBlackBy
  }
}

//  Follow the Rainbow Comet by Palpalych (Effect for GyverLamp 02/03/2020) //

// Кометы обычные
void RainbowCometRoutine() {      // <- ******* для оригинальной прошивки Gunner47 ******* (раскомментить/закоментить)
  dimAll(254U); // < -- затухание эффекта для последующего кадра
  CRGB _eNs_color = CHSV(millis() / modes[currentMode].Scale * 2, 255, 255);
  leds[XY(e_centerX, e_centerY)] += _eNs_color;
  leds[XY(e_centerX + 1, e_centerY)] += _eNs_color;
  leds[XY(e_centerX, e_centerY + 1)] += _eNs_color;
  leds[XY(e_centerX + 1, e_centerY + 1)] += _eNs_color;

  // Noise
  e_x[0] += 1500;
  e_y[0] += 1500;
  e_z[0] += 1500;
  e_scaleX[0] = 8000;
  e_scaleY[0] = 8000;
  FillNoise(0);
  MoveFractionalNoiseX(WIDTH / 2U - 1U);
  MoveFractionalNoiseY(HEIGHT / 2U - 1U);
}

// Кометы белые и одноцветные
void ColorCometRoutine() {      // <- ******* для оригинальной прошивки Gunner47 ******* (раскомментить/закоментить)
  dimAll(254U); // < -- затухание эффекта для последующего кадра
  CRGB _eNs_color = CRGB::White;
  if (modes[currentMode].Scale < 100) _eNs_color = CHSV((modes[currentMode].Scale) * 2.57, 255, 255); // 2.57 вместо 2.55, потому что при 100 будет белый цвет
  leds[XY(e_centerX, e_centerY)] += _eNs_color;
  leds[XY(e_centerX + 1, e_centerY)] += _eNs_color;
  leds[XY(e_centerX, e_centerY + 1)] += _eNs_color;
  leds[XY(e_centerX + 1, e_centerY + 1)] += _eNs_color;

  // Noise
  e_x[0] += 1500;
  e_y[0] += 1500;
  e_z[0] += 1500;
  e_scaleX[0] = 8000;
  e_scaleY[0] = 8000;
  FillNoise(0);
  MoveFractionalNoiseX(WIDTH / 2U - 1U);
  MoveFractionalNoiseY(HEIGHT / 2U - 1U);
}

// --------------------------- эффект мячики ----------------------
//  BouncingBalls2014 is a program that lets you animate an LED strip
//  to look like a group of bouncing balls
//  Daniel Wilson, 2014
//  https://github.com/githubcdr/Arduino/blob/master/bouncingballs/bouncingballs.ino
//  With BIG thanks to the FastLED community!
//  адаптация от SottNick
#define bballsGRAVITY           (-9.81)              // Downward (negative) acceleration of gravity in m/s^2
#define bballsH0                (1)                  // Starting height, in meters, of the ball (strip length)
#define bballsMaxNUM            (WIDTH * 2)          // максимальное количество мячиков прикручено при адаптации для бегунка Масштаб
uint8_t bballsNUM;                                   // Number of bouncing balls you want (recommend < 7, but 20 is fun in its own way) ... количество мячиков теперь задаётся бегунком, а не константой

uint8_t bballsCOLOR[bballsMaxNUM] ;                   // прикручено при адаптации для разноцветных мячиков
uint8_t bballsX[bballsMaxNUM] ;                       // прикручено при адаптации для распределения мячиков по радиусу лампы
bool bballsShift[bballsMaxNUM] ;                      // прикручено при адаптации для того, чтобы мячики не стояли на месте
float bballsVImpact0 = sqrt( -2 * bballsGRAVITY * bballsH0 );  // Impact velocity of the ball when it hits the ground if "dropped" from the top of the strip
float bballsVImpact[bballsMaxNUM] ;                   // As time goes on the impact velocity will change, so make an array to store those values
int   bballsPos[bballsMaxNUM] ;                       // The integer position of the dot on the strip (LED index)
long  bballsTLast[bballsMaxNUM] ;                     // The clock time of the last ground strike
float bballsCOR[bballsMaxNUM] ;                       // Coefficient of Restitution (bounce damping)

void bballsSetup() {
  bballsNUM = (modes[currentMode].Scale - 1U) / 99.0 * (bballsMaxNUM - 1U) + 1U;
  if (bballsNUM > bballsMaxNUM) bballsNUM = bballsMaxNUM;
  for (int i = 0 ; i < bballsNUM ; i++) {             // Initialize variables
    bballsCOLOR[i] = random8();
    bballsX[i] = random8(0U, WIDTH);
    bballsTLast[i] = millis();
    bballsPos[i] = 0U;                                // Balls start on the ground
    bballsVImpact[i] = bballsVImpact0;                // And "pop" up at vImpact0
    bballsCOR[i] = 0.90 - float(i) / pow(bballsNUM, 2); // это, видимо, прыгучесть. для каждого мячика уникальная изначально
    bballsShift[i] = false;
  }
}

void bballsLoop(bool isColored) {
  float bballsHi;
  float bballsTCycle;
  dimAll(255U - modes[currentMode].Speed);
  for (int i = 0 ; i < bballsNUM ; i++) {
    //leds[XY(bballsX[i], bballsPos[i])] = CRGB::Black; // off for the next loop around  // теперь пиксели гасятся в dimAll()

    bballsTCycle =  millis() - bballsTLast[i] ; // Calculate the time since the last time the ball was on the ground

    // A little kinematics equation calculates positon as a function of time, acceleration (gravity) and intial velocity
    bballsHi = 0.5 * bballsGRAVITY * pow( bballsTCycle / 1000.0 , 2.0 ) + bballsVImpact[i] * bballsTCycle / 1000.0;

    if ( bballsHi < 0 ) {
      bballsTLast[i] = millis();
      bballsHi = 0; // If the ball crossed the threshold of the "ground," put it back on the ground
      bballsVImpact[i] = bballsCOR[i] * bballsVImpact[i] ; // and recalculate its new upward velocity as it's old velocity * COR

      if ( bballsVImpact[i] < 0.01 ) // If the ball is barely moving, "pop" it back up at vImpact0
      {
        bballsCOR[i] = 0.90 - float(random(0U, 9U)) / pow(random(4U, 9U), 2); // сделал, чтобы мячики меняли свою прыгучесть каждый цикл
        bballsShift[i] = bballsCOR[i] >= 0.89;                             // если мячик максимальной прыгучести, то разрешаем ему сдвинуться
        bballsVImpact[i] = bballsVImpact0;
      }
    }
    bballsPos[i] = round( bballsHi * (HEIGHT - 1) / bballsH0);             // Map "h" to a "pos" integer index position on the LED strip
    if (bballsShift[i] && (bballsPos[i] == HEIGHT - 1)) {                  // если мячик получил право, то пускай сдвинется на максимальной высоте 1 раз
      bballsShift[i] = false;
      if (bballsCOLOR[i] % 2 == 0) {                                       // чётные налево, нечётные направо
        if (bballsX[i] == 0U) bballsX[i] = WIDTH - 1U;
        else --bballsX[i];
      } else {
        if (bballsX[i] == WIDTH - 1U) bballsX[i] = 0U;
        else ++bballsX[i];
      }
    }
    leds[XY(bballsX[i], bballsPos[i])] = CHSV(bballsCOLOR[i], (isColored) ? 255U : 0U, 255U);
  }
}

void BBallsRoutine(bool isColored)
{
  if (loadingFlag)
  {
    loadingFlag = false;
    FastLED.clear();
    bballsSetup();
  }
  bballsLoop(isColored);
}

// --------------------------- эффект спирали ----------------------
/*
 * Aurora: https://github.com/pixelmatix/aurora
 * https://github.com/pixelmatix/aurora/blob/sm3.0-64x64/PatternSpiro.h
 * Copyright (c) 2014 Jason Coon
 * Неполная адаптация SottNick
 */
    byte spirotheta1 = 0;
    byte spirotheta2 = 0;
//    byte spirohueoffset = 0; // будем использовать переменную сдвига оттенка hue из эффектов Радуга
    

    const uint8_t spiroradiusx = WIDTH / 4 - 1;
    const uint8_t spiroradiusy = HEIGHT / 4 - 1;
    
    const uint8_t spirocenterX = WIDTH / 2;
    const uint8_t spirocenterY = HEIGHT / 2;
    
    const uint8_t spirominx = spirocenterX - spiroradiusx;
    const uint8_t spiromaxx = spirocenterX + spiroradiusx + 1;
    const uint8_t spirominy = spirocenterY - spiroradiusy;
    const uint8_t spiromaxy = spirocenterY + spiroradiusy + 1;

    uint8_t spirocount = 1;
    uint8_t spirooffset = 256 / spirocount;
    boolean spiroincrement = false;

    boolean spirohandledChange = false;

uint8_t mapsin8(uint8_t theta, uint8_t lowest = 0, uint8_t highest = 255) {
  uint8_t beatsin = sin8(theta);
  uint8_t rangewidth = highest - lowest;
  uint8_t scaledbeat = scale8(beatsin, rangewidth);
  uint8_t result = lowest + scaledbeat;
  return result;
}

uint8_t mapcos8(uint8_t theta, uint8_t lowest = 0, uint8_t highest = 255) {
  uint8_t beatcos = cos8(theta);
  uint8_t rangewidth = highest - lowest;
  uint8_t scaledbeat = scale8(beatcos, rangewidth);
  uint8_t result = lowest + scaledbeat;
  return result;
}
  
void spiroRoutine() {
    if (loadingFlag)
    {
      loadingFlag = false;
      if (modes[currentMode].Scale > 100) modes[currentMode].Scale = 100; // чтобы не было проблем при прошивке без очистки памяти
      // добавлено изменение палитры бегунком Масштаб
      curPalette = palette_arr[(int)((float)modes[currentMode].Scale/100*((sizeof(palette_arr)/sizeof(TProgmemRGBPalette16 *))-1U))];
    }
      
      blurScreen(20); // @Palpalych советует делать размытие
      dimAll(255U - modes[currentMode].Speed / 10);

      boolean change = false;
      
      for (int i = 0; i < spirocount; i++) {
        uint8_t x = mapsin8(spirotheta1 + i * spirooffset, spirominx, spiromaxx);
        uint8_t y = mapcos8(spirotheta1 + i * spirooffset, spirominy, spiromaxy);

        uint8_t x2 = mapsin8(spirotheta2 + i * spirooffset, x - spiroradiusx, x + spiroradiusx);
        uint8_t y2 = mapcos8(spirotheta2 + i * spirooffset, y - spiroradiusy, y + spiroradiusy);


       //CRGB color = ColorFromPalette( PartyColors_p, (hue + i * spirooffset), 128U); // вообще-то палитра должна постоянно меняться, но до адаптации этого руки уже не дошли
       //CRGB color = ColorFromPalette(*curPalette, hue + i * spirooffset, 128U); // вот так уже прикручена к бегунку Масштаба. за
       //leds[XY(x2, y2)] += color;
if (x2<WIDTH && y2<HEIGHT) // добавил проверки. не знаю, почему эффект подвисает без них
        leds[XY(x2, y2)] += (CRGB)ColorFromPalette(*curPalette, hue + i * spirooffset);
        
        if((x2 == spirocenterX && y2 == spirocenterY) ||
           (x2 == spirocenterX && y2 == spirocenterY)) change = true;
      }

      spirotheta2 += 2;

      EVERY_N_MILLIS(12) {
        spirotheta1 += 1;
      }

      EVERY_N_MILLIS(75) {
        if (change && !spirohandledChange) {
          spirohandledChange = true;
          
          if (spirocount >= WIDTH || spirocount == 1) spiroincrement = !spiroincrement;

          if (spiroincrement) {
            if(spirocount >= 4)
              spirocount *= 2;
            else
              spirocount += 1;
          }
          else {
            if(spirocount > 4)
              spirocount /= 2;
            else
              spirocount -= 1;
          }

          spirooffset = 256 / spirocount;
        }
        
        if(!change) spirohandledChange = false;
      }

      EVERY_N_MILLIS(33) {
        hue += 1;
      }
}

// --------------------------- эффект МетаБолз ----------------------
// Stefan Petrick's MetaBalls Effect mod by PalPalych for GyverLamp 
/*
  Metaballs proof of concept by Stefan Petrick (mod by Palpalych for GyverLamp 27/02/2020)
  ...very rough 8bit math here...
  read more about the concept of isosurfaces and metaballs:
  https://www.gamedev.net/articles/programming/graphics/exploring-metaballs-and-isosurfaces-in-2d-r2556
*/
void MetaBallsRoutine() {
  float speed = modes[currentMode].Speed / 127.0;

  // get some 2 random moving points
  uint8_t x2 = inoise8(millis() * speed, 25355, 685 ) / WIDTH;
  uint8_t y2 = inoise8(millis() * speed, 355, 11685 ) / HEIGHT;

  uint8_t x3 = inoise8(millis() * speed, 55355, 6685 ) / WIDTH;
  uint8_t y3 = inoise8(millis() * speed, 25355, 22685 ) / HEIGHT;

  // and one Lissajou function
  uint8_t x1 = beatsin8(23 * speed, 0, 15);
  uint8_t y1 = beatsin8(28 * speed, 0, 15);

  for (uint8_t y = 0; y < HEIGHT; y++) {
    for (uint8_t x = 0; x < WIDTH; x++) {

      // calculate distances of the 3 points from actual pixel
      // and add them together with weightening
      uint8_t  dx =  abs(x - x1);
      uint8_t  dy =  abs(y - y1);
      uint8_t dist = 2 * sqrt((dx * dx) + (dy * dy));

      dx =  abs(x - x2);
      dy =  abs(y - y2);
      dist += sqrt((dx * dx) + (dy * dy));

      dx =  abs(x - x3);
      dy =  abs(y - y3);
      dist += sqrt((dx * dx) + (dy * dy));

      // inverse result
      byte color = modes[currentMode].Speed * 10 / dist;

      // map color between thresholds
      if (color > 0 and color < 60) {
        drawPixelXY(x, y, CHSV(color * 9, 255, 255));
      } else {
        drawPixelXY(x, y, CHSV(0, 255, 255));
      }
      // show the 3 points, too
      drawPixelXY(x1, y1, CRGB(255, 255, 255));
      drawPixelXY(x2, y2, CRGB(255, 255, 255));
      drawPixelXY(x3, y3, CRGB(255, 255, 255));
    }
  }
}

// ***** SINUSOID3 / СИНУСОИД3 *****
// v1.7.0 - Updating for GuverLamp v1.7 by PalPalych 12.03.2020
/*
  Sinusoid3 by Stefan Petrick (mod by Palpalych for GyverLamp 27/02/2020)
  read more about the concept: https://www.youtube.com/watch?v=mubH-w_gwdA
*/
void Sinusoid3Routine()
{
  const uint8_t semiHeightMajor =  HEIGHT / 2 + (HEIGHT % 2);
  const uint8_t semiWidthMajor =  WIDTH / 2  + (WIDTH % 2) ;
  float e_s3_speed = 0.004 * modes[currentMode].Speed + 0.015; // speed of the movement along the Lissajous curves
  float e_s3_size = 3 * (float)modes[currentMode].Scale/100.0 + 2;    // amplitude of the curves

  float time_shift = float(millis()%(uint32_t)(30000*(1.0/((float)modes[currentMode].Speed/255))));

  for (uint8_t y = 0; y < HEIGHT; y++) {
    for (uint8_t x = 0; x < WIDTH; x++) {
      CRGB color;

      float cx = y + float(e_s3_size * (sinf (float(e_s3_speed * 0.003 * time_shift)))) - semiHeightMajor;  // the 8 centers the middle on a 16x16
      float cy = x + float(e_s3_size * (cosf (float(e_s3_speed * 0.0022 * time_shift)))) - semiWidthMajor;
      float v = 127 * (1 + sinf ( sqrtf ( ((cx * cx) + (cy * cy)) ) ));
      color.r = v;

      cx = x + float(e_s3_size * (sinf (e_s3_speed * float(0.0021 * time_shift)))) - semiWidthMajor;
      cy = y + float(e_s3_size * (cosf (e_s3_speed * float(0.002 * time_shift)))) - semiHeightMajor;
      v = 127 * (1 + sinf ( sqrtf ( ((cx * cx) + (cy * cy)) ) ));
      color.b = v;

      cx = x + float(e_s3_size * (sinf (e_s3_speed * float(0.0041 * time_shift)))) - semiWidthMajor;
      cy = y + float(e_s3_size * (cosf (e_s3_speed * float(0.0052 * time_shift)))) - semiHeightMajor;
      v = 127 * (1 + sinf ( sqrtf ( ((cx * cx) + (cy * cy)) ) ));
      color.g = v;
      drawPixelXY(x, y, color);
    }
  }
}



// ============= водо/огне/лава/радуга/хренопад ===============
// SPARKING: What chance (out of 255) is there that a new spark will be lit?
// Higher chance = more roaring fire.  Lower chance = more flickery fire.
// Default 120, suggested range 50-200.
extern const TProgmemRGBPalette16 WaterfallColors4in1_p FL_PROGMEM = {
  CRGB::Black,
  CRGB::DarkSlateGray,
  CRGB::DimGray,
  CRGB::LightSlateGray,

  CRGB::DimGray,
  CRGB::DarkSlateGray,
  CRGB::Silver,
  CRGB::DarkCyan,

  CRGB::Lavender,
  CRGB::Silver,
  CRGB::Azure,
  CRGB::LightGrey,

  CRGB::GhostWhite,
  CRGB::Silver,
  CRGB::White,
  CRGB::RoyalBlue
};

void fire2012WithPalette4in1() {
  uint8_t rCOOLINGNEW = constrain((uint16_t)(modes[currentMode].Scale % 16) * 32 / HEIGHT + 16, 1, 255) ;
  // Array of temperature readings at each simulation cell
  static byte heat[WIDTH][HEIGHT];

  for (uint8_t x = 0; x < WIDTH; x++) {
    // Step 1.  Cool down every cell a little
    for (unsigned int i = 0; i < HEIGHT; i++) {
      //heat[x][i] = qsub8(heat[x][i], random8(0, ((rCOOLINGNEW * 10) / HEIGHT) + 2));
      heat[x][i] = qsub8(heat[x][i], random8(0, rCOOLINGNEW));
    }

    // Step 2.  Heat from each cell drifts 'up' and diffuses a little
    for (int k = HEIGHT - 1; k >= 2; k--) {
      heat[x][k] = (heat[x][k - 1] + heat[x][k - 2] + heat[x][k - 2]) / 3;
    }

    // Step 3.  Randomly ignite new 'sparks' of heat near the bottom
    if (random8() < SPARKINGNEW) {
      int y = random8(2);
      heat[x][y] = qadd8(heat[x][y], random8(160, 255));
    }

    // Step 4.  Map from heat cells to LED colors
    for (unsigned int j = 0; j < HEIGHT; j++) {
      // Scale the heat value from 0-255 down to 0-240
      // for best results with color palettes.
      byte colorindex = scale8(heat[x][j], 240);
      if  (modes[currentMode].Scale < 16) {            // Lavafall
        leds[XY(x, (HEIGHT - 1) - j)] = ColorFromPalette(LavaColors_p, colorindex);
      } else if (modes[currentMode].Scale < 32) {      // Firefall
        leds[XY(x, (HEIGHT - 1) - j)] = ColorFromPalette(HeatColors_p, colorindex);
      } else if (modes[currentMode].Scale < 48) {      // Waterfall
        leds[XY(x, (HEIGHT - 1) - j)] = ColorFromPalette(WaterfallColors4in1_p, colorindex);
      } else if (modes[currentMode].Scale < 64) {      // Skyfall
        leds[XY(x, (HEIGHT - 1) - j)] = ColorFromPalette(CloudColors_p, colorindex);
      } else if (modes[currentMode].Scale < 80) {      // Forestfall
        leds[XY(x, (HEIGHT - 1) - j)] = ColorFromPalette(ForestColors_p, colorindex);
      } else if (modes[currentMode].Scale < 96) {      // Rainbowfall
        leds[XY(x, (HEIGHT - 1) - j)] = ColorFromPalette(RainbowColors_p, colorindex);
      } else {                      // Aurora
        leds[XY(x, (HEIGHT - 1) - j)] = ColorFromPalette(RainbowStripeColors_p, colorindex);
      }
    }
  }
}

void RainRoutine()
{
  for (uint8_t x = 0U; x < WIDTH; x++)
  {
    // заполняем случайно верхнюю строку
    CRGB thisColor = getPixColorXY(x, HEIGHT - 1U);
    if ((uint32_t)thisColor == 0U)
    {
     if (random(0, 50) == 0U)
      {
      if (modes[currentMode].Scale==0) drawPixelXY(x, HEIGHT - 1U, CHSV(random(0, 9) * 28, 255U, 255U)); // Радужный дождь
      else
      if (modes[currentMode].Scale==100) drawPixelXY(x, HEIGHT - 1U, 0xE0FFFF - 0x101010 * random(0, 4)); // Снег
      else
      drawPixelXY(x, HEIGHT - 1U, CHSV(modes[currentMode].Scale*2.4+random(0, 16),255,255)); // Цветной дождь
      }
  }
    else
       leds[XY(x,HEIGHT - 1U)]-=CHSV(0,0,random(96, 128));
  }
  // сдвигаем всё вниз
  for (uint8_t x = 0U; x < WIDTH; x++)
  {
    for (uint8_t y = 0U; y < HEIGHT - 1U; y++)
    {
      drawPixelXY(x, y, getPixColorXY(x, y + 1U));
    }
  }
}

// ============= ЭФФЕКТ ПРИЗМАТА ===============
// Prismata Loading Animation
// https://github.com/pixelmatix/aurora/blob/master/PatternPendulumWave.h
// Адаптация от (c) SottNick

void PrismataRoutine() {
  if (loadingFlag)
  {
    loadingFlag = false;
    if (modes[currentMode].Scale > 100) modes[currentMode].Scale = 100; // чтобы не было проблем при прошивке без очистки памяти
    curPalette = palette_arr[(int)((float)modes[currentMode].Scale/100 * ((sizeof(palette_arr)/sizeof(TProgmemRGBPalette16 *))-1U))];
  } 
  
  EVERY_N_MILLIS(33) {
    hue++; // используем переменную сдвига оттенка из функций радуги, чтобы не занимать память
  }
  blurScreen(20); // @Palpalych посоветовал делать размытие
  dimAll(255U - modes[currentMode].Scale % 11U);

  for (int x = 0; x < WIDTH; x++)
  {
    //uint8_t y = beatsin8(x + 1, 0, HEIGHT-1); // это я попытался распотрошить данную функцию до исходного кода и вставить в неё регулятор скорости
    // вместо 28 в оригинале было 280, умножения на .Speed не было, а вместо >>17 было (<<8)>>24. короче, оригинальная скорость достигается при бегунке .Speed=20
    uint8_t beat = (GET_MILLIS() * (accum88(x + 1)) * 28 * modes[currentMode].Speed) >> 17;
    uint8_t y = scale8(sin8(beat), HEIGHT-1);
    //и получилось!!!
    
    drawPixelXY(x, y, ColorFromPalette(*curPalette, x * 7 + hue));
  }
}

// ============= ЭФФЕКТ БЕГУЩАЯ СТРОКА ===============
void text_running() {
    while (!fillString(TextTicker, CHSV(modes[EFF_TEXT].Scale * 2.55, 255U, 255U), true) && currentMode == EFF_TEXT) {
      parseUDP();
      #ifdef ESP_USE_BUTTON
      if (buttonEnabled)
      {
        buttonTick();
      }
      #endif
    }
}

// ============= ЭФФЕКТ СТАЯ ===============
// https://github.com/pixelmatix/aurora/blob/master/PatternFlock.h
// Адаптация от (c) SottNick и @kDn

template <class T>
class Vector2 {
public:
    T x, y;

    Vector2() :x(0), y(0) {}
    Vector2(T x, T y) : x(x), y(y) {}
    Vector2(const Vector2& v) : x(v.x), y(v.y) {}

    Vector2& operator=(const Vector2& v) {
        x = v.x;
        y = v.y;
        return *this;
    }
    
    bool isEmpty() {
        return x == 0 && y == 0;
    }

    bool operator==(Vector2& v) {
        return x == v.x && y == v.y;
    }

    bool operator!=(Vector2& v) {
        return !(x == y);
    }

    Vector2 operator+(Vector2& v) {
        return Vector2(x + v.x, y + v.y);
    }
    Vector2 operator-(Vector2& v) {
        return Vector2(x - v.x, y - v.y);
    }

    Vector2& operator+=(Vector2& v) {
        x += v.x;
        y += v.y;
        return *this;
    }
    Vector2& operator-=(Vector2& v) {
        x -= v.x;
        y -= v.y;
        return *this;
    }

    Vector2 operator+(double s) {
        return Vector2(x + s, y + s);
    }
    Vector2 operator-(double s) {
        return Vector2(x - s, y - s);
    }
    Vector2 operator*(double s) {
        return Vector2(x * s, y * s);
    }
    Vector2 operator/(double s) {
        return Vector2(x / s, y / s);
    }
    
    Vector2& operator+=(double s) {
        x += s;
        y += s;
        return *this;
    }
    Vector2& operator-=(double s) {
        x -= s;
        y -= s;
        return *this;
    }
    Vector2& operator*=(double s) {
        x *= s;
        y *= s;
        return *this;
    }
    Vector2& operator/=(double s) {
        x /= s;
        y /= s;
        return *this;
    }

    void set(T x, T y) {
        this->x = x;
        this->y = y;
    }

    void rotate(double deg) {
        double theta = deg / 180.0 * M_PI;
        double c = cos(theta);
        double s = sin(theta);
        double tx = x * c - y * s;
        double ty = x * s + y * c;
        x = tx;
        y = ty;
    }

    Vector2& normalize() {
        if (length() == 0) return *this;
        *this *= (1.0 / length());
        return *this;
    }

    float dist(Vector2 v) const {
        Vector2 d(v.x - x, v.y - y);
        return d.length();
    }
    float length() const {
        return sqrt(x * x + y * y);
    }

    float mag() const {
        return length();
    }

    float magSq() {
        return (x * x + y * y);
    }

    void truncate(double length) {
        double angle = atan2f(y, x);
        x = length * cos(angle);
        y = length * sin(angle);
    }

    Vector2 ortho() const {
        return Vector2(y, -x);
    }

    static float dot(Vector2 v1, Vector2 v2) {
        return v1.x * v2.x + v1.y * v2.y;
    }
    static float cross(Vector2 v1, Vector2 v2) {
        return (v1.x * v2.y) - (v1.y * v2.x);
    }

    void limit(float max) {
        if (magSq() > max*max) {
            normalize();
            *this *= max;
        }
    }
};

typedef Vector2<float> PVector;

// Flocking
// Daniel Shiffman <http://www.shiffman.net>
// The Nature of Code, Spring 2009

// Boid class
// Methods for Separation, Cohesion, Alignment added

class Boid {
  public:

    PVector location;
    PVector velocity;
    PVector acceleration;
    float maxforce;    // Maximum steering force
    float maxspeed;    // Maximum speed

    float desiredseparation = 4;
    float neighbordist = 8;
    byte colorIndex = 0;
    float mass;

    boolean enabled = true;

    Boid() {}

    Boid(float x, float y) {
      acceleration = PVector(0, 0);
      velocity = PVector(randomf(), randomf());
      location = PVector(x, y);
      maxspeed = 1.5;
      maxforce = 0.05;
    }

    static float randomf() {
      return mapfloat(random(0, 255), 0, 255, -.5, .5);
    }

    static float mapfloat(float x, float in_min, float in_max, float out_min, float out_max) {
      return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    }

    void run(Boid boids [], uint8_t boidCount) {
      flock(boids, boidCount);
      update();
      // wrapAroundBorders();
      // render();
    }

    // Method to update location
    void update() {
      // Update velocity
      velocity += acceleration;
      // Limit speed
      velocity.limit(maxspeed);
      location += velocity;
      // Reset acceleration to 0 each cycle
      acceleration *= 0;
    }

    void applyForce(PVector force) {
      // We could add mass here if we want A = F / M
      acceleration += force;
    }

    void repelForce(PVector obstacle, float radius) {
      //Force that drives boid away from obstacle.

      PVector futPos = location + velocity; //Calculate future position for more effective behavior.
      PVector dist = obstacle - futPos;
      float d = dist.mag();

      if (d <= radius) {
        PVector repelVec = location - obstacle;
        repelVec.normalize();
        if (d != 0) { //Don't divide by zero.
          // float scale = 1.0 / d; //The closer to the obstacle, the stronger the force.
          repelVec.normalize();
          repelVec *= (maxforce * 7);
          if (repelVec.mag() < 0) { //Don't let the boids turn around to avoid the obstacle.
            repelVec.y = 0;
          }
        }
        applyForce(repelVec);
      }
    }

    // We accumulate a new acceleration each time based on three rules
    void flock(Boid boids [], uint8_t boidCount) {
      PVector sep = separate(boids, boidCount);   // Separation
      PVector ali = align(boids, boidCount);      // Alignment
      PVector coh = cohesion(boids, boidCount);   // Cohesion
      // Arbitrarily weight these forces
      sep *= 1.5;
      ali *= 1.0;
      coh *= 1.0;
      // Add the force vectors to acceleration
      applyForce(sep);
      applyForce(ali);
      applyForce(coh);
    }

    // Separation
    // Method checks for nearby boids and steers away
    PVector separate(Boid boids [], uint8_t boidCount) {
      PVector steer = PVector(0, 0);
      int count = 0;
      // For every boid in the system, check if it's too close
      for (int i = 0; i < boidCount; i++) {
        Boid other = boids[i];
        if (!other.enabled)
          continue;
        float d = location.dist(other.location);
        // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
        if ((d > 0) && (d < desiredseparation)) {
          // Calculate vector pointing away from neighbor
          PVector diff = location - other.location;
          diff.normalize();
          diff /= d;        // Weight by distance
          steer += diff;
          count++;            // Keep track of how many
        }
      }
      // Average -- divide by how many
      if (count > 0) {
        steer /= (float) count;
      }

      // As long as the vector is greater than 0
      if (steer.mag() > 0) {
        // Implement Reynolds: Steering = Desired - Velocity
        steer.normalize();
        steer *= maxspeed;
        steer -= velocity;
        steer.limit(maxforce);
      }
      return steer;
    }

    // Alignment
    // For every nearby boid in the system, calculate the average velocity
    PVector align(Boid boids [], uint8_t boidCount) {
      PVector sum = PVector(0, 0);
      int count = 0;
      for (int i = 0; i < boidCount; i++) {
        Boid other = boids[i];
        if (!other.enabled)
          continue;
        float d = location.dist(other.location);
        if ((d > 0) && (d < neighbordist)) {
          sum += other.velocity;
          count++;
        }
      }
      if (count > 0) {
        sum /= (float) count;
        sum.normalize();
        sum *= maxspeed;
        PVector steer = sum - velocity;
        steer.limit(maxforce);
        return steer;
      }
      else {
        return PVector(0, 0);
      }
    }

    // Cohesion
    // For the average location (i.e. center) of all nearby boids, calculate steering vector towards that location
    PVector cohesion(Boid boids [], uint8_t boidCount) {
      PVector sum = PVector(0, 0);   // Start with empty vector to accumulate all locations
      int count = 0;
      for (int i = 0; i < boidCount; i++) {
        Boid other = boids[i];
        if (!other.enabled)
          continue;
        float d = location.dist(other.location);
        if ((d > 0) && (d < neighbordist)) {
          sum += other.location; // Add location
          count++;
        }
      }
      if (count > 0) {
        sum /= count;
        return seek(sum);  // Steer towards the location
      }
      else {
        return PVector(0, 0);
      }
    }

    // A method that calculates and applies a steering force towards a target
    // STEER = DESIRED MINUS VELOCITY
    PVector seek(PVector target) {
      PVector desired = target - location;  // A vector pointing from the location to the target
      // Normalize desired and scale to maximum speed
      desired.normalize();
      desired *= maxspeed;
      // Steering = Desired minus Velocity
      PVector steer = desired - velocity;
      steer.limit(maxforce);  // Limit to maximum steering force
      return steer;
    }

    // A method that calculates a steering force towards a target
    // STEER = DESIRED MINUS VELOCITY
    void arrive(PVector target) {
      PVector desired = target - location;  // A vector pointing from the location to the target
      float d = desired.mag();
      // Normalize desired and scale with arbitrary damping within 100 pixels
      desired.normalize();
      if (d < 4) {
        float m = map(d, 0, 100, 0, maxspeed);
        desired *= m;
      }
      else {
        desired *= maxspeed;
      }

      // Steering = Desired minus Velocity
      PVector steer = desired - velocity;
      steer.limit(maxforce);  // Limit to maximum steering force
      applyForce(steer);
      //Serial.println(d);
    }

    void wrapAroundBorders() {
      if (location.x < 0) location.x = WIDTH - 1;
      if (location.y < 0) location.y = HEIGHT - 1;
      if (location.x >= WIDTH) location.x = 0;
      if (location.y >= HEIGHT) location.y = 0;
    }

    void avoidBorders() {
      PVector desired = velocity;

      if (location.x < 8) desired = PVector(maxspeed, velocity.y);
      if (location.x >= WIDTH - 8) desired = PVector(-maxspeed, velocity.y);
      if (location.y < 8) desired = PVector(velocity.x, maxspeed);
      if (location.y >= HEIGHT - 8) desired = PVector(velocity.x, -maxspeed);

      if (desired != velocity) {
        PVector steer = desired - velocity;
        steer.limit(maxforce);
        applyForce(steer);
      }

      if (location.x < 0) location.x = 0;
      if (location.y < 0) location.y = 0;
      if (location.x >= WIDTH) location.x = WIDTH - 1;
      if (location.y >= HEIGHT) location.y = HEIGHT - 1;
    }

    bool bounceOffBorders(float bounce) {
      bool bounced = false;

      if (location.x >= WIDTH) {
        location.x = WIDTH - 1;
        velocity.x *= -bounce;
        bounced = true;
      }
      else if (location.x < 0) {
        location.x = 0;
        velocity.x *= -bounce;
        bounced = true;
      }

      if (location.y >= HEIGHT) {
        location.y = HEIGHT - 1;
        velocity.y *= -bounce;
        bounced = true;
      }
      else if (location.y < 0) {
        location.y = 0;
        velocity.y *= -bounce;
        bounced = true;
      }

      return bounced;
    }

    void render() {
      // // Draw a triangle rotated in the direction of velocity
      // float theta = velocity.heading2D() + radians(90);
      // fill(175);
      // stroke(0);
      // pushMatrix();
      // translate(location.x,location.y);
      // rotate(theta);
      // beginShape(TRIANGLES);
      // vertex(0, -r*2);
      // vertex(-r, r*2);
      // vertex(r, r*2);
      // endShape();
      // popMatrix();
      // backgroundLayer.drawPixel(location.x, location.y, CRGB::Blue);
    }
};

static const uint8_t AVAILABLE_BOID_COUNT = 20;
Boid boids[AVAILABLE_BOID_COUNT]; 

    static const int boidCount = 10;
    Boid predator;

    PVector wind;
//    byte hue = 0; будем использовать сдвиг от эффектов Радуга
    bool predatorPresent = true;

void flockRoutine(bool predatorIs) {
    if (loadingFlag)
    {
      loadingFlag = false;

      if (modes[currentMode].Scale > 100) modes[currentMode].Scale = 100; // чтобы не было проблем при прошивке без очистки памяти
      curPalette = palette_arr[(int)((float)modes[currentMode].Scale/100 * ((sizeof(palette_arr)/sizeof(TProgmemRGBPalette16 *))-1U))];

      for (int i = 0; i < boidCount; i++) {
        boids[i] = Boid(15, 15);
        boids[i].maxspeed = 0.380 * modes[currentMode].Speed /127.0+0.380/2;
        boids[i].maxforce = 0.015 * modes[currentMode].Speed /127.0+0.015/2;
      }
      predatorPresent = predatorIs && random(0, 2) >= 1;
      if (predatorPresent) {
        predator = Boid(31, 31);
        predator.maxspeed = 0.385 * modes[currentMode].Speed /127.0+0.385/2;
        predator.maxforce = 0.020 * modes[currentMode].Speed /127.0+0.020/2;
        predator.neighbordist = 8.0; // было 16.0 и хищник гонял по одной линии всегда
        predator.desiredseparation = 0.0;
      }
    }
    
      blurScreen(15); // @Palpalych советует делать размытие
      //myLamp.dimAll(254U - (31-(myLamp.effects.getScale()%32))*8);
      dimAll(255U - (modes[currentMode].Scale % 11U) * 3);

      bool applyWind = random(0, 255) > 240;
      if (applyWind) {
        wind.x = Boid::randomf() * .015 * modes[currentMode].Speed /127.0 + .015/2;
        wind.y = Boid::randomf() * .015 * modes[currentMode].Speed /127.0 + .015/2;
      }

      CRGB color = ColorFromPalette(*curPalette, hue);
      

      for (int i = 0; i < boidCount; i++) {
        Boid * boid = &boids[i];

        if (predatorPresent) {
          // flee from predator
          boid->repelForce(predator.location, 10);
        }

        boid->run(boids, boidCount);
        boid->wrapAroundBorders();
        PVector location = boid->location;
        // PVector velocity = boid->velocity;
        // backgroundLayer.drawLine(location.x, location.y, location.x - velocity.x, location.y - velocity.y, color);
        // effects.leds[XY(location.x, location.y)] += color;
        drawPixelXY(location.x, location.y, color);

        if (applyWind) {
          boid->applyForce(wind);
          applyWind = false;
        }
      }

      if (predatorPresent) {
        predator.run(boids, boidCount);
        predator.wrapAroundBorders();
        color = ColorFromPalette(*curPalette, hue + 128);
        PVector location = predator.location;
        // PVector velocity = predator.velocity;
        // backgroundLayer.drawLine(location.x, location.y, location.x - velocity.x, location.y - velocity.y, color);
        // effects.leds[XY(location.x, location.y)] += color;        
        drawPixelXY(location.x, location.y, color);
      }

      EVERY_N_MILLIS(333) {
        hue++;
      }
      
      EVERY_N_SECONDS(30) {
        predatorPresent = predatorIs && !predatorPresent;
      }
}

// ============= ЭФФЕКТ ВИХРИ ===============
// https://github.com/pixelmatix/aurora/blob/master/PatternFlowField.h
// Адаптация (c) SottNick
// используются переменные эффекта Стая. Без него работать не будет.

uint16_t ff_x;
uint16_t ff_y;
uint16_t ff_z;

static const uint8_t ff_speed = 1; // чем выше этот параметр, тем короче переходы (градиенты) между цветами. 1 - это самое красивое
static const uint8_t ff_scale = 26; // чем больше этот параметр, тем больше "языков пламени" или как-то так. 26 - это норм
    
void whirlRoutine(bool oneColor) {
  if (loadingFlag)
  {
    loadingFlag = false;
    if (modes[currentMode].Scale > 100) modes[currentMode].Scale = 100; // чтобы не было проблем при прошивке без очистки памяти
    curPalette = palette_arr[(int)((float)modes[currentMode].Scale/100 * ((sizeof(palette_arr)/sizeof(TProgmemRGBPalette16 *))-1U))];

      ff_x = random16();
      ff_y = random16();
      ff_z = random16();

      for (int i = 0; i < AVAILABLE_BOID_COUNT; i++) {
        boids[i] = Boid(random(WIDTH), 0);
      }
  } 
  dimAll(240);

  for (int i = 0; i < AVAILABLE_BOID_COUNT; i++) {
    Boid * boid = &boids[i];
    
    int ioffset = ff_scale * boid->location.x;
    int joffset = ff_scale * boid->location.y;

    byte angle = inoise8(ff_x + ioffset, ff_y + joffset, ff_z);

    boid->velocity.x = (float) sin8(angle) * 0.0078125 - 1.0;
    boid->velocity.y = -((float)cos8(angle) * 0.0078125 - 1.0);
    boid->update();
  
    if (oneColor)
      drawPixelXY(boid->location.x, boid->location.y, CHSV(modes[currentMode].Scale * 2.55, (modes[currentMode].Scale == 100) ? 0U : 255U, 255U)); // цвет белый для .Scale=100
      // артефакт текстирования. удали. drawPixelXY(boid->location.x, boid->location.y, ColorFromPalette(CRGBPalette16( CHSV(modes[currentMode].Scale * 2.55, 255U, 255U), CHSV(modes[currentMode].Scale * 2.55, 255U, 255U) , CHSV(modes[currentMode].Scale * 2.55, 255U, 255U) , CHSV(modes[currentMode].Scale * 2.55, 255U, 255U)), angle ));
    else
      drawPixelXY(boid->location.x, boid->location.y, ColorFromPalette(*curPalette, angle + hue)); // + hue постепенно сдвигает палитру по кругу

    if (boid->location.x < 0 || boid->location.x >= WIDTH || boid->location.y < 0 || boid->location.y >= HEIGHT) {
      boid->location.x = random(WIDTH);
      boid->location.y = 0;
    }
  }

  EVERY_N_MILLIS(200) {
    hue++;
  }

  ff_x += ff_speed;
  ff_y += ff_speed;
  ff_z += ff_speed;
}

// ============= ЭФФЕКТ ВОЛНЫ ===============
// https://github.com/pixelmatix/aurora/blob/master/PatternWave.h
// Адаптация от (c) SottNick

    byte waveThetaUpdate = 0;
    byte waveThetaUpdateFrequency = 0;
    byte waveTheta = 0;

    byte hueUpdate = 0;
    byte hueUpdateFrequency = 0;
//    byte hue = 0; будем использовать сдвиг от эффектов Радуга

    byte waveRotation = 0;
    uint8_t waveScale = 256 / WIDTH;
    uint8_t waveCount = 1;

void WaveRoutine() {
    if (loadingFlag)
    {
      loadingFlag = false;
      if (modes[currentMode].Scale > 100) modes[currentMode].Scale = 100; // чтобы не было проблем при прошивке без очистки памяти
      curPalette = palette_arr[(int)((float)((modes[currentMode].Scale-1)%25)/25 * ((sizeof(palette_arr)/sizeof(TProgmemRGBPalette16 *))-1U))];
     
      //waveRotation = random(0, 4);// теперь вместо этого регулятор Масштаб
      waveRotation = (modes[currentMode].Scale - 1) / 25U;
      //waveCount = random(1, 3);// теперь вместо этого чётное/нечётное у регулятора Скорость
      waveCount = modes[currentMode].Speed % 2;
      //waveThetaUpdateFrequency = random(1, 2);
      //hueUpdateFrequency = random(1, 6);      
    }
 
        dimAll(254);
  
        int n = 0;

        switch (waveRotation) {
            case 0:
                for (int x = 0; x < WIDTH; x++) {
                    n = quadwave8(x * 2 + waveTheta) / waveScale;
                    drawPixelXY(x, n, ColorFromPalette(*curPalette, hue + x));
                    if (waveCount != 1)
                        drawPixelXY(x, HEIGHT - 1 - n, ColorFromPalette(*curPalette, hue + x));
                }
                break;

            case 1:
                for (int y = 0; y < HEIGHT; y++) {
                    n = quadwave8(y * 2 + waveTheta) / waveScale;
                    drawPixelXY(n, y, ColorFromPalette(*curPalette, hue + y));
                    if (waveCount != 1)
                        drawPixelXY(WIDTH - 1 - n, y, ColorFromPalette(*curPalette, hue + y));
                }
                break;

            case 2:
                for (int x = 0; x < WIDTH; x++) {
                    n = quadwave8(x * 2 - waveTheta) / waveScale;
                    drawPixelXY(x, n, ColorFromPalette(*curPalette, hue + x));
                    if (waveCount != 1)
                        drawPixelXY(x, HEIGHT - 1 - n, ColorFromPalette(*curPalette, hue + x));
                }
                break;

            case 3:
                for (int y = 0; y < HEIGHT; y++) {
                    n = quadwave8(y * 2 - waveTheta) / waveScale;
                    drawPixelXY(n, y, ColorFromPalette(*curPalette, hue + y));
                    if (waveCount != 1)
                        drawPixelXY(WIDTH - 1 - n, y, ColorFromPalette(*curPalette, hue + y));
                }
                break;
        }


        if (waveThetaUpdate >= waveThetaUpdateFrequency) {
            waveThetaUpdate = 0;
            waveTheta++;
        }
        else {
            waveThetaUpdate++;
        }

        if (hueUpdate >= hueUpdateFrequency) {
            hueUpdate = 0;
            hue++;
        }
        else {
            hueUpdate++;
        }
        
        blurScreen(20); // @Palpalych советует делать размытие. вот в этом эффекте его явно не хватает...
}

// ============= ЭФФЕКТ ОГОНЬ 2018 ===============
// https://gist.github.com/StefanPetrick/1ba4584e534ba99ca259c1103754e4c5
// https://gist.github.com/StefanPetrick/819e873492f344ebebac5bcd2fdd8aa8
// Адаптация от (c) SottNick

// parameters and buffer for the noise array
// (вместо закомментированных ситрок используются массивы и переменные от эффекта Кометы для экономии памяти)
//define NUM_LAYERS 2 // менять бесполезно, так как в коде чётко использовано 2 слоя
//uint32_t e_x[NUM_LAYERSMAX];
//uint32_t e_y[NUM_LAYERSMAX];
//uint32_t e_z[NUM_LAYERSMAX];
//uint32_t e_scaleX[NUM_LAYERSMAX];
//uint32_t e_scaleY[NUM_LAYERSMAX];
//uint8_t noise3d[NUM_LAYERSMAX][WIDTH][HEIGHT];
uint8_t fire18noise2[NUM_LAYERSMAX][WIDTH][HEIGHT];

uint8_t fire18heat[NUM_LEDS];
// this finds the right index within a serpentine matrix

void Fire2018_2() {
  const uint8_t CentreY =  HEIGHT / 2 + (HEIGHT % 2);
  const uint8_t CentreX =  WIDTH / 2  + (WIDTH % 2) ;

  // some changing values
  uint16_t ctrl1 = inoise16(11 * millis(), 0, 0);
  uint16_t ctrl2 = inoise16(13 * millis(), 100000, 100000);
  uint16_t  ctrl = ((ctrl1 + ctrl2) / 2);

  // parameters for the heatmap
  uint16_t speed = 25;
  e_x[0] = 3 * ctrl * speed;
  e_y[0] = 20 * millis() * speed;
  e_z[0] = 5 * millis() * speed ;
  e_scaleX[0] = ctrl1 / 2;
  e_scaleY[0] = ctrl2 / 2;

  //calculate the noise data
  uint8_t layer = 0;

  for (uint8_t i = 0; i < WIDTH; i++) {
    uint32_t ioffset = e_scaleX[layer] * (i - CentreX);
    for (uint8_t j = 0; j < HEIGHT; j++) {
      uint32_t joffset = e_scaleY[layer] * (j - CentreY);
      uint16_t data = ((inoise16(e_x[layer] + ioffset, e_y[layer] + joffset, e_z[layer])) + 1);
      noise3d[layer][i][j] = data >> 8;
    }
  }

  // parameters for te brightness mask
  speed = 20;
  e_x[1] = 3 * ctrl * speed;
  e_y[1] = 20 * millis() * speed;
  e_z[1] = 5 * millis() * speed ;
  e_scaleX[1] = ctrl1 / 2;
  e_scaleY[1] = ctrl2 / 2;

  //calculate the noise data
  layer = 1;
  for (uint8_t i = 0; i < WIDTH; i++) {
    uint32_t ioffset = e_scaleX[layer] * (i - CentreX);
    for (uint8_t j = 0; j < HEIGHT; j++) {
      uint32_t joffset = e_scaleY[layer] * (j - CentreY);
      uint16_t data = ((inoise16(e_x[layer] + ioffset, e_y[layer] + joffset, e_z[layer])) + 1);
      noise3d[layer][i][j] = data >> 8;
    }
  }

  // draw lowest line - seed the fire
  for (uint8_t x = 0; x < WIDTH; x++) {
    fire18heat[XY(x, HEIGHT - 1)] =  noise3d[0][WIDTH - 1 - x][CentreY - 1]; // хз, почему взято с середины. вожможно, нужно просто с 7 строки вне зависимости от высоты матрицы
  }


  //copy everything one line up
  for (uint8_t y = 0; y < HEIGHT - 1; y++) {
    for (uint8_t x = 0; x < WIDTH; x++) {
      fire18heat[XY(x, y)] = fire18heat[XY(x, y + 1)];
    }
  }

  //dim
  for (uint8_t y = 0; y < HEIGHT - 1; y++) {
    for (uint8_t x = 0; x < WIDTH; x++) {
      uint8_t dim = noise3d[0][x][y];
      // high value = high flames
      dim = dim / 1.7;
      dim = 255 - dim;
      fire18heat[XY(x, y)] = scale8(fire18heat[XY(x, y)] , dim);
    }
  }

  for (uint8_t y = 0; y < HEIGHT; y++) {
    for (uint8_t x = 0; x < WIDTH; x++) {
      // map the colors based on heatmap
      //leds[XY(x, HEIGHT - 1 - y)] = CRGB( fire18heat[XY(x, y)], 1 , 0);
      leds[XY(x, HEIGHT - 1 - y)] = CRGB( fire18heat[XY(x, y)], fire18heat[XY(x, y)] * 0.153, 0);// так оттенок лучше

      //пытался понять, как регулировать оттенок пламени...
      //  if (modes[currentMode].Scale > 50)
      //    leds[XY(x, HEIGHT - 1 - y)] = CRGB( fire18heat[XY(x, y)], fire18heat[XY(x, y)] * (modes[currentMode].Scale % 50)  * 0.051, 0);
      //  else
      //    leds[XY(x, HEIGHT - 1 - y)] = CRGB( fire18heat[XY(x, y)], 1 , fire18heat[XY(x, y)] * modes[currentMode].Scale * 0.051);
      //примерно понял
   
      // dim the result based on 2nd noise layer
      leds[XY(x, HEIGHT - 1 - y)].nscale8(noise3d[1][x][y]);
    }
  }

}

// --- AS 19.04.2020 ---
// ============= ЭФФЕКТЫ ОСАДКИ / ТУЧКА В БАНКЕ / ГРОЗА В БАНКЕ ===============
// https://github.com/marcmerlin/FastLED_NeoMatrix_SmartMatrix_LEDMatrix_GFX_Demos/blob/master/FastLED/Sublime_Demos/Sublime_Demos.ino
// там по ссылке ещё остались эффекты с 3 по 9 (в SimplePatternList перечислены)

//прикольная процедура добавляет блеск почти к любому эффекту после его отрисовки https://www.youtube.com/watch?v=aobtR1gIyIo
//void addGlitter( uint8_t chanceOfGlitter){
//  if ( random8() < chanceOfGlitter) leds[ random16(NUM_LEDS) ] += CRGB::White;
//}

//static uint8_t intensity = 42;  // будет бегунок масштаба

// Array of temp cells (used by fire, theMatrix, coloredRain, stormyRain)
// uint8_t **tempMatrix; = noise3d[0][WIDTH][HEIGHT]
// uint8_t *splashArray; = line[WIDTH] из эффекта Огонь

CRGB solidRainColor = CRGB(60,80,90);

uint8_t wrapX(int8_t x){
  return (x + WIDTH)%WIDTH;
}
uint8_t wrapY(int8_t y){
  return (y + HEIGHT)%HEIGHT;
}

void rain(byte backgroundDepth, byte maxBrightness, byte spawnFreq, byte tailLength, CRGB rainColor, bool splashes, bool clouds, bool storm)
{
  static uint16_t noiseX = random16();
  static uint16_t noiseY = random16();
  static uint16_t noiseZ = random16();

  CRGB lightningColor = CRGB(72,72,80);
  CRGBPalette16 rain_p( CRGB::Black, rainColor );
#ifdef SMARTMATRIX
  CRGBPalette16 rainClouds_p( CRGB::Black, CRGB(75,84,84), CRGB(49,75,75), CRGB::Black );
#else
  CRGBPalette16 rainClouds_p( CRGB::Black, CRGB(15,24,24), CRGB(9,15,15), CRGB::Black );
#endif

  fadeToBlackBy( leds, NUM_LEDS, 255-tailLength);

  // Loop for each column individually
  for (int x = 0; x < WIDTH; x++) {
    // Step 1.  Move each dot down one cell
    for (int i = 0; i < HEIGHT; i++) {
      if (noise3d[0][x][i] >= backgroundDepth) {  // Don't move empty cells
        if (i > 0) noise3d[0][x][wrapY(i-1)] = noise3d[0][x][i];
        noise3d[0][x][i] = 0;
      }
    }

    // Step 2.  Randomly spawn new dots at top
    if (random(255) < spawnFreq) {
      noise3d[0][x][HEIGHT-1] = random(backgroundDepth, maxBrightness);
    }

    // Step 3. Map from tempMatrix cells to LED colors
    for (int y = 0; y < HEIGHT; y++) {
      if (noise3d[0][x][y] >= backgroundDepth) {  // Don't write out empty cells
        leds[XY(x,y)] = ColorFromPalette(rain_p, noise3d[0][x][y]);
      }
    }

    // Step 4. Add splash if called for
    if (splashes) {
      // FIXME, this is broken
      byte j = line[x];
      byte v = noise3d[0][x][0];

      if (j >= backgroundDepth) {
        leds[XY(wrapX(x-2),0)] = ColorFromPalette(rain_p, j/3);
        leds[XY(wrapX(x+2),0)] = ColorFromPalette(rain_p, j/3);
        line[x] = 0;   // Reset splash
      }

      if (v >= backgroundDepth) {
        leds[XY(wrapX(x-1),1)] = ColorFromPalette(rain_p, v/2);
        leds[XY(wrapX(x+1),1)] = ColorFromPalette(rain_p, v/2);
        line[x] = v; // Prep splash for next frame
      }
    }

    // Step 5. Add lightning if called for
    if (storm) {
      //uint8_t lightning[WIDTH][HEIGHT];
      // ESP32 does not like static arrays  https://github.com/espressif/arduino-esp32/issues/2567
      uint8_t *lightning = (uint8_t *) malloc(WIDTH * HEIGHT);
      while (lightning == NULL) { Serial.println("lightning malloc failed"); }


      if (random16() < 72) {    // Odds of a lightning bolt
        lightning[scale8(random8(), WIDTH-1) + (HEIGHT-1) * WIDTH] = 255;  // Random starting location
        for(int ly = HEIGHT-1; ly > 1; ly--) {
          for (int lx = 1; lx < WIDTH-1; lx++) {
            if (lightning[lx + ly * WIDTH] == 255) {
              lightning[lx + ly * WIDTH] = 0;
              uint8_t dir = random8(4);
              switch (dir) {
                case 0:
                  leds[XY(lx+1,ly-1)] = lightningColor;
                  lightning[(lx+1) + (ly-1) * WIDTH] = 255; // move down and right
                break;
                case 1:
                  leds[XY(lx,ly-1)] = CRGB(128,128,128); // я без понятия, почему у верхней молнии один оттенок, а у остальных - другой
                  lightning[lx + (ly-1) * WIDTH] = 255;    // move down
                break;
                case 2:
                  leds[XY(lx-1,ly-1)] = CRGB(128,128,128);
                  lightning[(lx-1) + (ly-1) * WIDTH] = 255; // move down and left
                break;
                case 3:
                  leds[XY(lx-1,ly-1)] = CRGB(128,128,128);
                  lightning[(lx-1) + (ly-1) * WIDTH] = 255; // fork down and left
                  leds[XY(lx-1,ly-1)] = CRGB(128,128,128);
                  lightning[(lx+1) + (ly-1) * WIDTH] = 255; // fork down and right
                break;
              }
            }
          }
        }
      }
      free(lightning);
    }

    // Step 6. Add clouds if called for
    if (clouds) {
      uint16_t noiseScale = 250;  // A value of 1 will be so zoomed in, you'll mostly see solid colors. A value of 4011 will be very zoomed out and shimmery
      const uint16_t cloudHeight = (HEIGHT*0.2)+1;

      // This is the array that we keep our computed noise values in
      //static uint8_t noise[WIDTH][cloudHeight];
      static uint8_t *noise = (uint8_t *) malloc(WIDTH * cloudHeight);
      while (noise == NULL) { Serial.println("noise malloc failed"); }
      int xoffset = noiseScale * x + hue;

      for(int z = 0; z < cloudHeight; z++) {
        int yoffset = noiseScale * z - hue;
        uint8_t dataSmoothing = 192;
        uint8_t noiseData = qsub8(inoise8(noiseX + xoffset,noiseY + yoffset,noiseZ),16);
        noiseData = qadd8(noiseData,scale8(noiseData,39));
        noise[x * cloudHeight + z] = scale8( noise[x * cloudHeight + z], dataSmoothing) + scale8( noiseData, 256 - dataSmoothing);
        nblend(leds[XY(x,HEIGHT-z-1)], ColorFromPalette(rainClouds_p, noise[x * cloudHeight + z]), (cloudHeight-z)*(250/cloudHeight));
      }
      noiseZ ++;
    }
  }
}

uint8_t myScale8(uint8_t x) { // даёт масштабировать каждые 8 градаций (от 0 до 7) бегунка Масштаб в значения от 0 до 255 по типа синусоиде
  uint8_t x8 = x % 8U;
  uint8_t x4 = x8 % 4U;
  if (x4 == 0U)
    if (x8 == 0U)       return 0U;
    else                return 255U;
  else if (x8 < 4U)     return (1U   + x4 * 72U); // всего 7шт по 36U + 3U лишних = 255U (чтобы восхождение по синусоиде не было зеркально спуску)
//else
                        return (253U - x4 * 72U); // 253U = 255U - 2U
}

/*void coloredRain() // внимание! этот эффект заточен на работу бегунка Масштаб в диапазоне от 0 до 255. пока что единственный.
{
  // я хз, как прикрутить а 1 регулятор и длину хвостов и цвет капель
  // ( Depth of dots, maximum brightness, frequency of new dots, length of tails, color, splashes, clouds, ligthening )
  //rain(60, 200, map8(intensity,5,100), 195, CRGB::Green, false, false, false); // было CRGB::Green
  if (modes[currentMode].Scale > 247U)
    rain(60, 200, map8(42,5,100), myScale8(modes[currentMode].Scale), solidRainColor, false, false, false);
  else
    rain(60, 200, map8(42,5,100), myScale8(modes[currentMode].Scale), CHSV(modes[currentMode].Scale, 255U, 255U), false, false, false);
}*/

void simpleRain()
{
  // ( Depth of dots, maximum brightness, frequency of new dots, length of tails, color, splashes, clouds, ligthening )
  //rain(60, 200, map8(intensity,2,60), 10, solidRainColor, true, true, false);
  rain(60, 180,(modes[currentMode].Scale-1), 30, solidRainColor, true, true, false);
}

void stormyRain()
{
  // ( Depth of dots, maximum brightness, frequency of new dots, length of tails, color, splashes, clouds, ligthening )
  //rain(0, 90, map8(intensity,0,150)+60, 10, solidRainColor, true, true, true);
  rain(60, 160, (modes[currentMode].Scale-1), 30, solidRainColor, true, true, true);
}

// ------------------------------ ЭФФЕКТ МЕРЦАНИЕ ----------------------
// (c) SottNick

#define TWINKLES_SPEEDS 4     // всего 4 варианта скоростей мерцания
#define TWINKLES_MULTIPLIER 6 // слишком медленно, если на самой медленной просто по единичке добавлять

void twinklesRoutine(){
    if (loadingFlag)
    {
      loadingFlag = false;
      setCurrentPallete();
      hue = 0U;
      for (uint32_t idx=0; idx < NUM_LEDS; idx++) {
        if (random8(modes[currentMode].Scale % 11U) == 0){
          ledsbuff[idx].r = random8();                          // оттенок пикселя
          ledsbuff[idx].g = random8(1, TWINKLES_SPEEDS * 2 +1); // скорость и направление (нарастает 1-4 или угасает 5-8)
          ledsbuff[idx].b = random8();                          // яркость
        }
        else
          ledsbuff[idx] = 0;                                    // всё выкл
      }
    }
    for (uint32_t idx=0; idx < NUM_LEDS; idx++) {
      if (ledsbuff[idx].b == 0){
        if (random8(modes[currentMode].Scale % 11U) == 0 && hue > 0){  // если пиксель ещё не горит, зажигаем каждый ХЗй
          ledsbuff[idx].r = random8();                          // оттенок пикселя
          ledsbuff[idx].g = random8(1, TWINKLES_SPEEDS +1);     // скорость и направление (нарастает 1-4, но не угасает 5-8)
          ledsbuff[idx].b = ledsbuff[idx].g;                    // яркость
          hue--; // уменьшаем количество погасших пикселей
        }
      }
      else if (ledsbuff[idx].g <= TWINKLES_SPEEDS){             // если нарастание яркости
        if (ledsbuff[idx].b > 255U - ledsbuff[idx].g - TWINKLES_MULTIPLIER){            // если досигнут максимум
          ledsbuff[idx].b = 255U;
          ledsbuff[idx].g = ledsbuff[idx].g + TWINKLES_SPEEDS;
        }
        else
          ledsbuff[idx].b = ledsbuff[idx].b + ledsbuff[idx].g + TWINKLES_MULTIPLIER;
      }
      else {                                                    // если угасание яркости
        if (ledsbuff[idx].b <= ledsbuff[idx].g - TWINKLES_SPEEDS + TWINKLES_MULTIPLIER){// если досигнут минимум
          ledsbuff[idx].b = 0;                                  // всё выкл
          hue++; // считаем количество погасших пикселей
        }
        else
          ledsbuff[idx].b = ledsbuff[idx].b - ledsbuff[idx].g + TWINKLES_SPEEDS - TWINKLES_MULTIPLIER;
      }
      if (ledsbuff[idx].b == 0)
        leds[idx] = 0U;
      else
        leds[idx] = ColorFromPalette(*curPalette, ledsbuff[idx].r, ledsbuff[idx].b);
    }
}
